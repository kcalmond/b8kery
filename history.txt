    1  pwd
    2  ll
    3  mkdir git
    4  cd ggit
    5  cd git
    6  git clone https://github.com/powerline/fonts.git
    7  cd fonts
    8  ./install.sh
    9  pwd
   10  ll
   11  cd ..
   12  ll
   13  rm -rf ./fonts
   14  pwd
   15  ll
   16  cd
   17  ls -al
   18  vim .bash_profile
   19  pwd
   20  vi .zshrc
   21  cat bash_profile
   22  alias
   23  alias | less
   24  cd -
   25  pwd
   26  cd
   27  cd -
   28  cd
   29  -
   30  cd
   31  pwd
   32  cat .bash_profile
   33  lr
   34  echo #PATH
   35  env | grep -i path
   36  echo $PATH
   37  ll bin
   38  az
   39  exit
   40  sudo chmod 766 /usr/local/share/zsh
   41  sudo chmod 766 /usr/local/share/zsh/site-functions
   42  eixt
   43  exit
   44  sudo chmod 755 /usr/local/share/zsh/site-functions
   45  sudo chmod 755 /usr/local/share/zsh
   46  exit
   47  which zsh
   48  exit
   49  stty -a
   50  brew install zsh-syntax-highlighting
   51  vim .zshrc
   52  zsh
   53  vim .zshrc
   54  source ~/.zshrc
   55  ll
   56  echo "infinite loopies"
   57  pwd
   58  git clone https://github.com/mbadolato/iTerm2-Color-Schemes.git
   59  cd ~/Downloads
   60  ll
   61  curl -O https://raw.githubusercontent.com/MartinSeeler/iterm2-material-design/master/material-design-colors.itermcolors
   62  ll
   63  ls
   64  ll
   65  cd
   66  vim .zshrc
   67  cd
   68  cd ~/.oh-my-zsh
   69  ll
   70  cd
   71  ll
   72  cd ~/.oh-my-zsh
   73  ll
   74  clear
   75  ll
   76  cd themes
   77  ll
   78  clear
   79  ls
   80  pwd
   81  cd ..
   82  cd git
   83  ll
   84  git clone https://github.com/agnoster/agnoster-zsh-theme
   85  ll
   86  cd agnoster-zsh-theme
   87  ll
   88  clear
   89  ll
   90  cat README.md| more
   91  ll
   92  cp agnoster.zsh-theme ~/.oh-my-zsh/themes
   93  vim .zshrc
   94  zsh
   95  pwd
   96  cd D
   97  cd Downloads
   98  ll
   99  cd Lingon\ X.app
  100  clear
  101  ll
  102  cd
  103  ll
  104  vim foo
  105  `echo "\ue0b0 \u00b1 \ue0a0 \u27a6 \u2718 \u26a1 \u2699"`
  106  echo
  107  echo "\ue0b0 \u00b1 \ue0a0 \u27a6 \u2718 \u26a1 \u2699"
  108  stty -a
  109  pwd
  110  vim .zshrc
  111  pip
  112  cd
  113  brew install pip
  114  brew install python
  115  ls -al /usr/local/Frameworks
  116  sudo mkdir /usr/local/Frameworks
  117  chmod 775 /usr/local/Frameworks
  118  sudo chmod 775 /usr/local/Frameworks
  119  brew install python
  120  brew link python
  121  pwd
  122  whoami
  123  cd /usr/local
  124  ls
  125  ls -al
  126  ll
  127  chown calmond Frameworks
  128  sudo chown calmond Frameworks
  129  ll
  130  cd Frameworks
  131  ll
  132  ls -al
  133  brew link python
  134  brew install pip
  135  pip
  136  cd
  137  which easy_install
  138  easy_install pip
  139  sudo easy_install pip
  140  which pip
  141  pip
  142  pip install pygments
  143  echo $PATH
  144  vim .zshrc
  145  cat ~/.bash_profile
  146  vim ~/.bash_profile
  147  pip install pygments
  148  zsh
  149  ll
  150  ssty -a
  151  stty -a
  152  vim .zshrc
  153  brew install autojump
  154  ll /usr/local
  155  ll /usr/local/Cellar
  156  ll /usr/local/etc
  157  source .zshrc
  158  vim .zshrc
  159  ll
  160  pwd
  161  cd Pictures
  162  cd ..
  163  j Pictures/
  164  pwd
  165  cd
  166  vim .zshrc
  167  source .zshrc
  168  git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k
  169  nano
  170  vim .zshrc
  171  cd .\n.
  172  cd ../.oh-my-zsh/custom/themes
  173  ls
  174  cd powerlevel9k
  175  exit
  176  pwd
  177  cd .oh-my-zsh/themes
  178  ls
  179  ll
  180  pwd
  181  history
  182  vim .zshrc
  183  pwd
  184  ls
  185  source .zshrc
  186  cd .oh-my-zsh
  187  cd themes
  188  ll
  189  history
  190  source .zshrc
  191  cd
  192  source .zshrc
  193  ls -alt
  194  ls -alr
  195  ls -alR
  196  ls
  197  sudo bash
  198  sudo zsh
  199  ls
  200  ll
  201  exit
  202  cd
  203  which gcloud
  204  ls
  205  cd ~/Downloads
  206  ls -alt | more
  207  mkdir gcloud
  208  mv google-cloud-sdk-281.0.0-darwin-x86_64.tar.gz gcloudcd gcloudll
  209  ls -alt | head
  210  mv google-cloud-sdk-281.0.0-darwin-x86_64.tar.gz ./gcloud
  211  cd ./gcloud
  212  ll
  213  clear
  214  alias
  215  alias | less
  216  pushd ~
  217  ls
  218  ll
  219  ls -al
  220  vim .zshrc
  221  vim .oh-my-zsh
  222  vim .zshenv
  223  pwd
  224  cd .oh-my-zsh
  225  ll
  226  cd lib
  227  ll
  228  cd ..
  229  wd
  230  pwd
  231  find . -print | grep -i alias
  232  aliasfinder
  233  vim ./plugins/alias-finder/README.md
  234  :q!
  235  cd
  236  which ll
  237  grep -r ' ls -lAh' ~
  238  alias
  239  which gsw
  240  cd
  241  ll
  242  ls -al
  243  vim .zshrc
  244  pwd
  245  functions
  246  functions | less
  247  ls
  248  pwd
  249  cd Downloads
  250  cd gcloud
  251  ll
  252  tar -xvf ./google-cloud-sdk-281.0.0-darwin-x86_64.tar.gz
  253  ll
  254  clear
  255  alias
  256  l
  257  ll
  258  alias | grep ^c
  259  alias | grep ^l
  260  vim .zshrc
  261  source .zshrc
  262  alias | grep ^c
  263  alias
  264  ~v
  265  vim .zshrc
  266  source .zshrc
  267  alias | grep ^c
  268  cl
  269  cll
  270  ll
  271  cd google-cloud-sdk
  272  ./install.sh
  273  vim .zshrc
  274  vim ~/.zshrc
  275  cd
  276  which gcloud
  277  source .zshrc
  278  which gcloud
  279  gcloud init
  280  gcloud --help
  281  gcloud topic --help
  282  l
  283  cd .boto
  284  ll
  285  cat .boto
  286  vim .boto
  287  gcloud topic --help
  288  history
  289  gcloud --help
  290  gcloud --help projects
  291  gcloud projects --help
  292  gcloud projects list
  293  gcloud projects --help
  294  gcloud config list
  295  gcloud config configurations create K8s-THW
  296  gcloud config configurations create k8s-thw
  297  gcloud config list
  298  gcloud config
  299  gcloud configurations
  300  gcloud config configurations list
  301  gcloud config configurations activate default
  302  gcloud config configurations list
  303  gcloud config set
  304  gcloud init
  305  gcloud config configurations list
  306  gcloud config configurations default activate
  307  gcloud config configurations activate default
  308  gcloud config configurations list
  309  clear
  310  cd .ssh
  311  ll
  312  vim config
  313  vim known_hosts
  314  vim foo
  315  rm foo
  316  cd
  317  ssh-keygen -t rsa -f ~/.ssh/kcalmond-ssh-key -C kcalmond
  318  cd .ssh
  319  ll
  320  cat kcalmond-ssh-key.pub
  321  pwd
  322  ll
  323  cd
  324  ssh -i ~/.ssh/kcalmond-ssh-key kcalmond@34.94.104.8
  325  history
  326  history | more
  327  pwd
  328  cd ../.oh-my-zsh
  329  ll
  330  cd themes
  331  ll
  332  cd ..
  333  pwd
  334  cd ..
  335  ll
  336  cd .zshrc
  337  vim .zshrc
  338  ssh -i ~/.ssh/kcalmond-ssh-key kcalmond@34.94.104.8
  339  ls
  340  vim foo
  341  vim bar
  342  pwd
  343  ll
  344  ls -al
  345  vim .zshrc
  346  pwd
  347  cd /
  348  sudo bash
  349  echo $ZSH_CUSTOM
  350  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k
  351  pwd
  352  cd
  353  vim .zshrc
  354  which exec
  355  man exec
  356  exec zsh
  357  pwd
  358  ll
  359  which p10k
  360  p10k configure
  361  ll
  362  exec zsh
  363  ll
  364  p10k configure
  365  history | grep ssh
  366  ssh -i ~/.ssh/kcalmond-ssh-key kcalmond@34.94.104.8
  367  ls
  368  clear
  369  whoami
  370  gcloud
  371  gcloud version
  372  gcloud init
  373  gcloud auth login
  374  gcloud config set compute/region us-west1
  375  gcloud config set compute/zone us-west1-c
  376  gcloud compute zones list
  377  which tmux
  378  whoami
  379  history | grep ssh
  380  ssh -i ~/.ssh/kcalmond-ssh-key kcalmond@34.94.104.8
  381  getconf
  382  getconf LONG_BIT
  383  ssh -i ~/.ssh/kcalmond-ssh-key kcalmond@34.94.104.8
  384  history  grep curl
  385  history|  grep curl
  386  history | grep tar
  387  pwd
  388  ssh -i ~/.ssh/kcalmond-ssh-key kcalmond@34.94.104.8
  389  ls
  390  clear
  391  gcloud --help
  392  gcloud config
  393  gcloud --help
  394  gcloud info
  395  cat ~/.config/gcloud
  396  cd .config
  397  ll
  398  cd gcloud
  399  ll
  400  file *
  401  cat gce
  402  cat active_config
  403  cd
  404  gcloud info
  405  echo $TERM
  406  tmux
  407  which tmux
  408  brew install tmux
  409  brew
  410  which tmux
  411  tmx
  412  tmux
  413  echo $TERM
  414  ls
  415  echo $SHELL
  416  exit
  417  tmux
  418  s
  419  ls
  420  exit
  421  ls
  422  pwd
  423  cd bin
  424  ll
  425  exit
  426  tmux new -s tmuxlearn
  427  tmux list-sessions
  428  tmux attach -t tmuxlearn
  429  exit
  430  tmux -t :0
  431  tmux rename-window root
  432  tmux rename-window one
  433  clear
  434  tmux delete-window 1
  435  tmux list-windows
  436  tmux list-sessions
  437  tmux split-window -h
  438  tmux select-window 1
  439  tmux list-windows
  440  tmux list-sessions
  441  tmux list-panes
  442  tmux select-window 0
  443  tmux select-window -1 0
  444  tmux select-window -t 0
  445  tmux split-window
  446  clear
  447  tmux list-keys | less
  448  tmux list-commands | less
  449  tmux info
  450  tmux info | less
  451  tmux ls
  452  ls
  453  clear
  454  clear
  455  clear history
  456  ls
  457  clear
  458  clear history
  459  history
  460  clear history
  461  history
  462  ls
  463  history
  464  clear
  465  ls
  466  clear
  467  ls
  468  ls
  469  clear
  470  clear history
  471  history
  472  ls
  473  clear
  474  ls
  475  cd
  476  clear
  477  ls
  478  cd
  479  :
  480  cd
  481  ls
  482  cd
  483  :
  484  ls
  485  history | grep ssh
  486  ssh -i ~/.ssh/kcalmond-ssh-key kcalmond@34.94.104.8
  487  ls
  488  whoami
  489  pwd
  490  cd Downloads
  491  curl -o cfssl https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/darwin/cfssl
  492  curl -o cfssljson https://storage.googleapis.com/kubernetes-the-hard-way/cfssl/darwin/cfssljson
  493  ls cfssl*
  494  l cfssl*
  495  chmod 755 cfssl*
  496  pwd
  497  cd ..
  498  ll
  499  echo $PATH
  500  ll bin
  501  file bin/az
  502  vim bin/az
  503  ls -al
  504  grep BASH *
  505  grep PATH *
  506  grep PATH .*
  507  echo $SHELL
  508  which az
  509  echo $HOME
  510  vim .zshrc
  511  source .zshrc
  512  echo $PATH
  513  which az
  514  cd Downloads
  515  ll
  516  mv cfssl* ~/bin
  517  cd ~/bin
  518  ls -al
  519  ll
  520  cd
  521  which cfssl
  522  cd bin
  523  pwd
  524  ll
  525  mv cfssl orig_cfssl
  526  mv cfssljson orig_cfssljson
  527  ll
  528  cd
  529  brew install cfssl
  530  which cfssl
  531  which cfssljson
  532  cfssl version
  533  cfssljson version
  534  cfssljson --version
  535  curl -o kubectl https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/darwin/amd64/kubectl
  536  ls -al kubectl
  537  chmod 755 kubectl
  538  sudo mv kubectl /usr/local/bin
  539  kubectl --version client
  540  kubectl version --client
  541  exit
  542  ls
  543  s
  544  ls
  545  which cgloud
  546  which gcloud
  547  gcloud info
  548  gcloud compute networks create kthw --subnet-mode custom
  549  gcloud compute networks subnets create kubernetes --network kthw --range 10.240.0.0/24
  550  gcloud compute networks firewall-rules create kthw-allow-internal --allow tcp,udp,icmp --network kthw --source-ranges 10.240.0.0/24,10.200.0.0/16
  551  gcloud compute firewall-rules create kthw-allow-internal --allow tcp,udp,icmp --network kthw --source-ranges 10.240.0.0/24,10.200.0.0/16
  552  pwd
  553  vim .zshrc
  554  source .zshrc
  555  set
  556  hthth asdfadsfd asdfadsf --asdfasdf 
  557  source .zshrc
  558  gcloud compute firewall-rules create kthw-allow-external --allow tcp:22,tcp:6443,icmp \ --network kthw --source-ranges 10.240.0.0/24,10.200.0.0/16
  559  gcloud compute firewall-rules create kthw-allow-external --allow tcp:22,tcp:6443,icmp --network kthw --source-ranges 0.0.0.0/0
  560  gcloud compute firewall-rules list 
  561  gcloud compute firewall-rules list --filter="network:kthw"
  562  gcloud config get-value compute/region)
  563  gcloud config get-value compute/region
  564  gcloud compute addresses create kthw --region $(gcloud config get-value compute/region)
  565  gcloud compute addresses list 
  566  gcloud compute addresses list --filter="name=('kthw')"
  567  which git
  568  ll
  569  cd git
  570  ll
  571  git clone --bare https://github.com/kelseyhightower/kubernetes-the-hard-way.git
  572  ll
  573  cd kubernetes-the-hard-way.git
  574  ll
  575  ll objects
  576  pwd
  577  git lfs fetch --all
  578  man git
  579  git --version
  580  brew git upgrade
  581  brew upgrade git
  582  git -version
  583  git --version
  584  git lfs
  585  git --help
  586  git --help | more
  587  brew install git-lfs
  588  pwd
  589  git lfs fetch --all
  590  git push --mirror https://github.com/kcalmond/kcalmond-kthw-gcp.git
  591  git push --mirror https://github.com/kcalmond/kthw-gcp.git
  592  gcloud compute addresses list --filter="name=('kthw')"
  593  history | egrep ^gcloud
  594  pwd
  595  history | egrep ^gcloud
  596  history | egrep gcloud
  597  gcloud compute firewall-rules list --filter="network:kthw"
  598  ls
  599  pwd
  600  cd ..
  601  ll
  602  pwd
  603  cd 
  604  for i in 0 1 2; do\n  gcloud compute instances create controller-${i} \\n    --async \\n    --boot-disk-size 200GB \\n    --can-ip-forward \\n    --image-family ubuntu-1804-lts \\n    --image-project ubuntu-os-cloud \\n    --machine-type n1-standard-1 \\n    --private-network-ip 10.240.0.1${i} \\n    --scopes compute-rw,storage-ro,service-management,service-control,logging-write,monitoring \\n    --subnet kubernetes \\n    --tags kthw,controller\ndone
  605  for i in 0 1 2; do\n  gcloud compute instances create worker-${i} \\n    --async \\n    --boot-disk-size 200GB \\n    --can-ip-forward \\n    --image-family ubuntu-1804-lts \\n    --image-project ubuntu-os-cloud \\n    --machine-type n1-standard-1 \\n    --metadata pod-cidr=10.200.${i}.0/24 \\n    --private-network-ip 10.240.0.2${i} \\n    --scopes compute-rw,storage-ro,service-management,service-control,logging-write,monitoring \\n    --subnet kubernetes \\n    --tags kthw,worker\ndone
  606  gcloud compute instances list
  607  gcloud compute ssh controller-0
  608  gcloud compute ssh controller-1
  609  gcloud compute ssh controller-0
  610  pwd
  611  mkdir kthw
  612  cd kthw
  613  alias
  614  mcd
  615  mdc
  616  man mkdir
  617  vim .zshrc
  618  cd ..
  619  rmdir ./kthw
  620  vim .zshrc
  621  ll
  622  l
  623  ll
  624  ll | more
  625  l | more
  626  vim .bash_profile
  627  alias | less
  628  cd .config
  629  ll
  630  cd ..
  631  exit
  632  vim .zshrc
  633  pwd
  634  ll
  635  l
  636  cd .oh-my-zsh
  637  ll
  638  vim ./oh-my-zsh.sh
  639  pwd
  640  ll lib
  641  grep alias *
  642  cd lib
  643  grep alias *
  644  grep alias * | grep md
  645  vim directories.zsh
  646  source ~/.zshrc
  647  alias | grep mdc
  648  pwd
  649  ll
  650  mdc foo
  651  ll
  652  alias mdc
  653  vim directories.zsh
  654  source ~/.zshrc
  655  alias
  656  mdc foo
  657  ll
  658  man mkdir
  659  vim directories.zsh
  660  source ~/.zshrc
  661  vim directories.zsh
  662  source ~/.zshrc
  663  mcd foo
  664  ll
  665  pwd
  666  cd ..
  667  rmdir foo
  668  cd
  669  cd Desktop
  670  cd..
  671  cd ..
  672  ll
  673  cd git
  674  ll
  675  c git
  676  cd ..
  677  mkdir kthw
  678  rmdir kthw
  679  mcd kthw
  680  cat > ca-config.json <<EOF\n{\n  "signing": {\n    "default": {\n      "expiry": "8760h"\n    },\n    "profiles": {\n      "kubernetes": {\n        "usages": ["signing", "key encipherment", "server auth", "client auth"],\n        "expiry": "8760h"\n      }\n    }\n  }\n}\nEOF\n\ncat > ca-csr.json <<EOF\n{\n  "CN": "Kubernetes",\n  "key": {\n    "algo": "rsa",\n    "size": 2048\n  },\n  "names": [\n    {\n      "C": "US",\n      "L": "Portland",\n      "O": "Kubernetes",\n      "OU": "CA",\n      "ST": "Oregon"\n    }\n  ]\n}\nEOF
  681  vim ca-config.json
  682  ll
  683  vim ca-csr.json
  684  which  cfssl
  685  cfssl gencert -initca ca-csr.json | cfssljson -bare ca
  686  ll
  687  cfssl --version
  688  cfssl version
  689  {\n\ncat > admin-csr.json <<EOF\n{\n  "CN": "admin",\n  "key": {\n    "algo": "rsa",\n    "size": 2048\n  },\n  "names": [\n    {\n      "C": "US",\n      "L": "Portland",\n      "O": "system:masters",\n      "OU": "Kubernetes The Hard Way",\n      "ST": "Oregon"\n    }\n  ]\n}\nEOF\n\ncfssl gencert \\n  -ca=ca.pem \\n  -ca-key=ca-key.pem \\n  -config=ca-config.json \\n  -profile=kubernetes \\n  admin-csr.json | cfssljson -bare admin\n\n}
  690  ll
  691  ls
  692  l
  693  history
  694  clear
  695  ll
  696  for instance in worker-0 worker-1 worker-2; do\ncat > ${instance}-csr.json <<EOF\n{\n  "CN": "system:node:${instance}",\n  "key": {\n    "algo": "rsa",\n    "size": 2048\n  },\n  "names": [\n    {\n      "C": "US",\n      "L": "Portland",\n      "O": "system:nodes",\n      "OU": "Kubernetes The Hard Way",\n      "ST": "Oregon"\n    }\n  ]\n}\nEOF\nEXTERNAL_IP=$(gcloud compute instances describe ${instance} \\n  --format 'value(networkInterfaces[0].accessConfigs[0].natIP)')\n\nINTERNAL_IP=$(gcloud compute instances describe ${instance} \\n  --format 'value(networkInterfaces[0].networkIP)')\ncfssl gencert \\n  -ca=ca.pem \\n  -ca-key=ca-key.pem \\n  -config=ca-config.json \\n  -hostname=${instance},${EXTERNAL_IP},${INTERNAL_IP} \\n  -profile=kubernetes \\n  ${instance}-csr.json | cfssljson -bare ${instance}\ndone
  697  ls -alt
  698  ls -lt
  699  ls -t
  700  ls -at
  701  vim foo
  702  cat foo
  703  {\n\ncat > kube-controller-manager-csr.json <<EOF\n{\n  "CN": "system:kube-controller-manager",\n  "key": {\n    "algo": "rsa",\n    "size": 2048\n  },\n  "names": [\n    {\n      "C": "US",\n      "L": "Portland",\n      "O": "system:kube-controller-manager",\n      "OU": "Kubernetes The Hard Way",\n      "ST": "Oregon"\n    }\n  ]\n}\nEOF\n\ncfssl gencert \\n  -ca=ca.pem \\n  -ca-key=ca-key.pem \\n  -config=ca-config.json \\n  -profile=kubernetes \\n  kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager\n\n}
  704  lt
  705  ls -t
  706  ls -l
  707  ls -lt
  708  vim foo
  709  {\n\ncat > kube-proxy-csr.json <<EOF\n{\n  "CN": "system:kube-proxy",\n  "key": {\n    "algo": "rsa",\n    "size": 2048\n  },\n  "names": [\n    {\n      "C": "US",\n      "L": "Portland",\n      "O": "system:node-proxier",\n      "OU": "Kubernetes The Hard Way",\n      "ST": "Oregon"\n    }\n  ]\n}\nEOF\n\ncfssl gencert \\n  -ca=ca.pem \\n  -ca-key=ca-key.pem \\n  -config=ca-config.json \\n  -profile=kubernetes \\n  kube-proxy-csr.json | cfssljson -bare kube-proxy\n\n}
  710  ls -lt
  711  {\n\ncat > kube-scheduler-csr.json <<EOF\n{\n  "CN": "system:kube-scheduler",\n  "key": {\n    "algo": "rsa",\n    "size": 2048\n  },\n  "names": [\n    {\n      "C": "US",\n      "L": "Portland",\n      "O": "system:kube-scheduler",\n      "OU": "Kubernetes The Hard Way",\n      "ST": "Oregon"\n    }\n  ]\n}\nEOF\n\ncfssl gencert \\n  -ca=ca.pem \\n  -ca-key=ca-key.pem \\n  -config=ca-config.json \\n  -profile=kubernetes \\n  kube-scheduler-csr.json | cfssljson -bare kube-scheduler\n\n}
  712  ls -lt
  713  {\n\nKUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kthw \\n  --region $(gcloud config get-value compute/region) \\n  --format 'value(address)')\n\nKUBERNETES_HOSTNAMES=kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.svc.cluster.local\n\ncat > kubernetes-csr.json <<EOF\n{\n  "CN": "kubernetes",\n  "key": {\n    "algo": "rsa",\n    "size": 2048\n  },\n  "names": [\n    {\n      "C": "US",\n      "L": "Portland",\n      "O": "Kubernetes",\n      "OU": "kthw",\n      "ST": "Oregon"\n    }\n  ]\n}\nEOF\n\ncfssl gencert \\n  -ca=ca.pem \\n  -ca-key=ca-key.pem \\n  -config=ca-config.json \\n  -hostname=10.32.0.1,10.240.0.10,10.240.0.11,10.240.0.12,${KUBERNETES_PUBLIC_ADDRESS},127.0.0.1,${KUBERNETES_HOSTNAMES} \\n  -profile=kubernetes \\n  kubernetes-csr.json | cfssljson -bare kubernetes\n\n}
  714  ls -lt
  715  {\n\ncat > service-account-csr.json <<EOF\n{\n  "CN": "service-accounts",\n  "key": {\n    "algo": "rsa",\n    "size": 2048\n  },\n  "names": [\n    {\n      "C": "US",\n      "L": "Portland",\n      "O": "Kubernetes",\n      "OU": "Kubernetes The Hard Way",\n      "ST": "Oregon"\n    }\n  ]\n}\nEOF\n\ncfssl gencert \\n  -ca=ca.pem \\n  -ca-key=ca-key.pem \\n  -config=ca-config.json \\n  -profile=kubernetes \\n  service-account-csr.json | cfssljson -bare service-account\n\n}
  716  ls -lt
  717  for instance in worker-0 worker-1 worker-2; do\n  gcloud compute scp ca.pem ${instance}-key.pem ${instance}.pem ${instance}:~/\ndone
  718  for instance in controller-0 controller-1 controller-2; do\n  gcloud compute scp ca.pem ca-key.pem kubernetes-key.pem kubernetes.pem \\n    service-account-key.pem service-account.pem ${instance}:~/\ndone
  719  KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kthw \\n  --region $(gcloud config get-value compute/region) \\n  --format 'value(address)')
  720  echo $KUBERNETES_PUBLIC_ADDRESS
  721  gcloud compute addresses describe kthw
  722  gcloud config get-value compute/region
  723  gcloud compute addresses describe kthw
  724  for instance in worker-0 worker-1 worker-2; do\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \\n    --kubeconfig=${instance}.kubeconfig\n\n  kubectl config set-credentials system:node:${instance} \\n    --client-certificate=${instance}.pem \\n    --client-key=${instance}-key.pem \\n    --embed-certs=true \\n    --kubeconfig=${instance}.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kubernetes-the-hard-way \\n    --user=system:node:${instance} \\n    --kubeconfig=${instance}.kubeconfig\n\n  kubectl config use-context default --kubeconfig=${instance}.kubeconfig\ndone
  725  {\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \\n    --kubeconfig=kube-proxy.kubeconfig\n\n  kubectl config set-credentials system:kube-proxy \\n    --client-certificate=kube-proxy.pem \\n    --client-key=kube-proxy-key.pem \\n    --embed-certs=true \\n    --kubeconfig=kube-proxy.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kubernetes-the-hard-way \\n    --user=system:kube-proxy \\n    --kubeconfig=kube-proxy.kubeconfig\n\n  kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig\n}
  726  {\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://127.0.0.1:6443 \\n    --kubeconfig=kube-controller-manager.kubeconfig\n\n  kubectl config set-credentials system:kube-controller-manager \\n    --client-certificate=kube-controller-manager.pem \\n    --client-key=kube-controller-manager-key.pem \\n    --embed-certs=true \\n    --kubeconfig=kube-controller-manager.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kubernetes-the-hard-way \\n    --user=system:kube-controller-manager \\n    --kubeconfig=kube-controller-manager.kubeconfig\n\n  kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig\n}
  727  {\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://127.0.0.1:6443 \\n    --kubeconfig=kube-scheduler.kubeconfig\n\n  kubectl config set-credentials system:kube-scheduler \\n    --client-certificate=kube-scheduler.pem \\n    --client-key=kube-scheduler-key.pem \\n    --embed-certs=true \\n    --kubeconfig=kube-scheduler.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kubernetes-the-hard-way \\n    --user=system:kube-scheduler \\n    --kubeconfig=kube-scheduler.kubeconfig\n\n  kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig\n}
  728  {\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://127.0.0.1:6443 \\n    --kubeconfig=admin.kubeconfig\n\n  kubectl config set-credentials admin \\n    --client-certificate=admin.pem \\n    --client-key=admin-key.pem \\n    --embed-certs=true \\n    --kubeconfig=admin.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kubernetes-the-hard-way \\n    --user=admin \\n    --kubeconfig=admin.kubeconfig\n\n  kubectl config use-context default --kubeconfig=admin.kubeconfig\n}
  729  ls -lt | less
  730  for instance in worker-0 worker-1 worker-2; do\n  gcloud compute scp ${instance}.kubeconfig kube-proxy.kubeconfig ${instance}:~/\ndone
  731  for instance in controller-0 controller-1 controller-2; do\n  gcloud compute scp admin.kubeconfig kube-controller-manager.kubeconfig kube-scheduler.kubeconfig ${instance}:~/\ndone
  732  ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)
  733  cat > encryption-config.yaml <<EOF\nkind: EncryptionConfig\napiVersion: v1\nresources:\n  - resources:\n      - secrets\n    providers:\n      - aescbc:\n          keys:\n            - name: key1\n              secret: ${ENCRYPTION_KEY}\n      - identity: {}\nEOF
  734  for instance in controller-0 controller-1 controller-2; do\n  gcloud compute scp encryption-config.yaml ${instance}:~/\ndone
  735  history | grep ssh
  736  gcloud compute ssh controller-0
  737  gcloud compute ssh controller-1
  738  gcloud compute ssh controller-2
  739  exit
  740  ls
  741  exit
  742  ls
  743  ls
  744  exit
  745  tmux
  746  ls
  747  clear
  748  gcloud compute ssh controller-0
  749  ls
  750  clear
  751  gcloud compute ssh controller-1
  752  ls
  753  clear
  754  gcloud compute ssh controller-2
  755  pwd
  756  ls
  757  vim 05-config
  758  cat 05-config
  759  rm 05-config
  760  history | grep -i KUBERNETES_PUB
  761  KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kthw \\n  --region $(gcloud config get-value compute/region) \\n  --format 'value(address)')
  762  echo $KUBERNETES_PUBLIC_ADDRESS
  763  ls
  764  ls ..
  765  ls
  766  ls -al worker*
  767  rm worker-[0-2].kubeconfig
  768  ls -al worker*
  769  for instance in worker-0 worker-1 worker-2; do\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \\n    --kubeconfig=${instance}.kubeconfig\n\n  kubectl config set-credentials system:node:${instance} \\n    --client-certificate=${instance}.pem \\n    --client-key=${instance}-key.pem \\n    --embed-certs=true \\n    --kubeconfig=${instance}.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kthw \\n    --user=system:node:${instance} \\n    --kubeconfig=${instance}.kubeconfig\n\n  kubectl config use-context default --kubeconfig=${instance}.kubeconfig\ndone
  770  ls -al worker*
  771  {\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \\n    --kubeconfig=kube-proxy.kubeconfig\n\n  kubectl config set-credentials system:kube-proxy \\n    --client-certificate=kube-proxy.pem \\n    --client-key=kube-proxy-key.pem \\n    --embed-certs=true \\n    --kubeconfig=kube-proxy.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kthw \\n    --user=system:kube-proxy \\n    --kubeconfig=kube-proxy.kubeconfig\n\n  kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig\n}
  772  ls -alt
  773  ls *.kube*
  774  {\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \\n    --kubeconfig=kube-proxy.kubeconfig\n\n  kubectl config set-credentials system:kube-proxy \\n    --client-certificate=kube-proxy.pem \\n    --client-key=kube-proxy-key.pem \\n    --embed-certs=true \\n    --kubeconfig=kube-proxy.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kthw \\n    --user=system:kube-proxy \\n    --kubeconfig=kube-proxy.kubeconfig\n\n  kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig\n}
  775  ls -alt 
  776  ls -alt | more
  777  cat kube-proxy.kubeconfig
  778  cat kube-controller-manager.kubeconfig
  779  {\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://127.0.0.1:6443 \\n    --kubeconfig=kube-controller-manager.kubeconfig\n\n  kubectl config set-credentials system:kube-controller-manager \\n    --client-certificate=kube-controller-manager.pem \\n    --client-key=kube-controller-manager-key.pem \\n    --embed-certs=true \\n    --kubeconfig=kube-controller-manager.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kthw \\n    --user=system:kube-controller-manager \\n    --kubeconfig=kube-controller-manager.kubeconfig\n\n  kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig\n}
  780  ls -alt | head
  781  cat kube-controller-manager.kubeconfig
  782  {\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://127.0.0.1:6443 \\n    --kubeconfig=kube-scheduler.kubeconfig\n\n  kubectl config set-credentials system:kube-scheduler \\n    --client-certificate=kube-scheduler.pem \\n    --client-key=kube-scheduler-key.pem \\n    --embed-certs=true \\n    --kubeconfig=kube-scheduler.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kthw \\n    --user=system:kube-scheduler \\n    --kubeconfig=kube-scheduler.kubeconfig\n\n  kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig\n}
  783  ls -lt | head
  784  {\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://127.0.0.1:6443 \\n    --kubeconfig=admin.kubeconfig\n\n  kubectl config set-credentials admin \\n    --client-certificate=admin.pem \\n    --client-key=admin-key.pem \\n    --embed-certs=true \\n    --kubeconfig=admin.kubeconfig\n\n  kubectl config set-context default \\n    --cluster=kthw \\n    --user=admin \\n    --kubeconfig=admin.kubeconfig\n\n  kubectl config use-context default --kubeconfig=admin.kubeconfig\n}
  785  ls -lt | head
  786  for instance in worker-0 worker-1 worker-2; do\n  gcloud compute scp ${instance}.kubeconfig kube-proxy.kubeconfig ${instance}:~/\ndone
  787  for instance in controller-0 controller-1 controller-2; do\n  gcloud compute scp admin.kubeconfig kube-controller-manager.kubeconfig kube-scheduler.kubeconfig ${instance}:~/\ndone
  788  KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kubernetes-the-hard-way \\n    --region $(gcloud config get-value compute/region) \\n    --format 'value(address)')
  789  KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kthw \\n    --region $(gcloud config get-value compute/region) \\n    --format 'value(address)')
  790  echo $KUBERNETES_PUBLIC_ADDRESS
  791  gcloud compute http-health-checks create kubernetes \\n    --description "Kubernetes Health Check" \\n    --host "kubernetes.default.svc.cluster.local" \\n    --request-path "/healthz"
  792  gcloud compute http-health-checks delete kubernetes
  793  gcloud compute firewall-rules list
  794  gcloud compute firewall-rules create kthw-allow-health-check \\n    --network kthw \\n    --source-ranges 209.85.152.0/22,209.85.204.0/22,35.191.0.0/16 \\n    --allow tcp
  795  gcloud compute firewall-rules list
  796  gcloud compute target-pools list
  797  gcloud compute target-pools create kubernetes-target-pool \\n    --http-health-check kubernetes
  798  gcloud compute target-pools describe kubernetes-target-pool
  799  gcloud compute target-pools add-instances kubernetes-target-pool \\n   --instances controller-0,controller-1,controller-2
  800  gcloud compute target-pools describe kubernetes-target-pool
  801  gcloud compute forwarding-rules 
  802  gcloud compute forwarding-rules list
  803  gcloud compute forwarding-rules describe
  804  gcloud compute forwarding-rules describe kubernetes-forwarding-rule
  805  gcloud compute forwarding-rules create kubernetes-forwarding-rule \\n    --address ${KUBERNETES_PUBLIC_ADDRESS} \\n    --ports 6443 \\n    --region $(gcloud config get-value compute/region) \\n    --target-pool kubernetes-target-pool
  806  gcloud compute forwarding-rules describe kubernetes-forwarding-rule
  807  KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kthw \\n  --region $(gcloud config get-value compute/region) \\n  --format 'value(address)');echo $KUBERNETES_PUBLIC_ADDRESS
  808  ls
  809  curl --cacert ca.pem https://$\{KUBERNETES_PUBLIC_ADDRESS\}:6443/version
  810  echo $KUBERNETES_PUBLIC_ADDRESS
  811  curl --cacert ca.pem https://35.197.95.187:6443/version
  812  curl --cacert ca.pem https://${KUBERNETES_PUBLIC_ADDRESS}:6443/version
  813  gcloud compute ssh worker-0
  814  gcloud compute ssh worker-1
  815  gcloud compute ssh worker-2
  816  gcloud compute ssh controller-0 \\n  --command "kubectl get nodes --kubeconfig admin.kubeconfig"
  817  ll
  818  ll | grep -i admin
  819  {\n  KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kthw \\n    --region $(gcloud config get-value compute/region) \\n    --format 'value(address)')\n\n  kubectl config set-cluster kthw \\n    --certificate-authority=ca.pem \\n    --embed-certs=true \\n    --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443\n\n  kubectl config set-credentials admin \\n    --client-certificate=admin.pem \\n    --client-key=admin-key.pem\n\n  kubectl config set-context kthw \\n    --cluster=kthw \\n    --user=admin\n\n  kubectl config use-context kthw\n}
  820  pwd
  821  kubectl get componentstatuses
  822  kubectl get notes
  823  kubectl get nodes
  824  for instance in worker-0 worker-1 worker-2; do\n  gcloud compute instances describe ${instance} \\n    --format 'value[separator=" "](networkInterfaces[0].networkIP,metadata.items[0].value)'\ndone
  825  for i in 0 1 2; do\n  gcloud compute routes create kubernetes-route-10-200-${i}-0-24 \\n    --network kubernetes-the-hard-way \\n    --next-hop-address 10.240.0.2${i} \\n    --destination-range 10.200.${i}.0/24\ndone
  826  for i in 0 1 2; do\n  gcloud compute routes create kubernetes-route-10-200-${i}-0-24 \\n    --network kthw \\n    --next-hop-address 10.240.0.2${i} \\n    --destination-range 10.200.${i}.0/24\ndone
  827  gcloud compute routes list --filter "network: kthw"
  828  kubectl apply -f https://storage.googleapis.com/kubernetes-the-hard-way/coredns.yaml
  829  kubectl get pods -l k8s-app=kube-dns
  830  kubectl get pods -l k8s-app=kube-dns -n kube-system
  831  kubectl run --generator=run-pod/v1 busybox --image=busybox:1.28 --command -- sleep 3600
  832  kubectl get pods -l run-busybox
  833  kubectl get pods -l
  834  kubectl get pods
  835  kubectl get pods -l run-busybox
  836  kubectl get pods -l run=busybox
  837  POD_NAME=$(kubectl get pods -l run=busybox -o jsonpath="{.items[0].metadata.name}"); echo $POD_NAME
  838  kubectl exec -ti $POD_NAME -- nslookup kubernetes
  839  kubectl create secret generic kthw \\n  --from-literal="mykey=mydata"
  840  gcloud compute ssh controller-0 \\n  --command "sudo ETCDCTL_API=3 etcdctl get \\n  --endpoints=https://127.0.0.1:2379 \\n  --cacert=/etc/etcd/ca.pem \\n  --cert=/etc/etcd/kubernetes.pem \\n  --key=/etc/etcd/kubernetes-key.pem\\n  /registry/secrets/default/kthw | hexdump -C"
  841  kubectl create deployment nginx --image=nginx
  842  kubectl get pods
  843  kubectl get pods -l app=nginx
  844  POD_NAME=$(kubectl get pods -l app=nginx -o jsonpath="{.items[0].metadata.name}"); echo $POD_NAME
  845  kubectl port-forward $POD_NAME 8080:80
  846  cd
  847  clear
  848  curl --head http://127.0.0.1:8080
  849  kubectl logs $POD_NAME
  850  echo $POD_NAME
  851  kubectl exec -ti $POD_NAME -- nginx -v
  852  kubectl expose deployment nginx --port 80 --type NodePort
  853  NODE_PORT=$(kubectl get svc nginx \\n  --output=jsonpath='{range .spec.ports[0]}{.nodePort}'); echo $NODE_PORT
  854  gcloud compute firewall-rules create kthw-allow-nginx-service \\n  --allow=tcp:${NODE_PORT} \\n  --network kthw
  855  EXTERNAL_IP=$(gcloud compute instances describe worker-0 \\n  --format 'value(networkInterfaces[0].accessConfigs[0].natIP)') ; echo $EXTERNAL_IP
  856  EXTERNAL_IP=$(gcloud compute instances describe worker-1 \\n  --format 'value(networkInterfaces[0].accessConfigs[0].natIP)') ; echo $EXTERNAL_IP
  857  EXTERNAL_IP=$(gcloud compute instances describe worker-2 \\n  --format 'value(networkInterfaces[0].accessConfigs[0].natIP)') ; echo $EXTERNAL_IP
  858  curl -I http://$\{EXTERNAL_IP\}:$\{NODE_PORT\}
  859  curl -I http://${EXTERNAL_IP}:${NODE_PORT}
  860  cd
  861  vim .zshrc
  862  source .zshrc
  863  vim .zshrc
  864  source .zshrc
  865  cd kthw
  866  kubeon
  867  ls
  868  kubectl
  869  kubectl get pods
  870  vim .zshrc
  871  cd ..
  872  vim .zshrc
  873  source .zshrc
  874  kubeon
  875  cd kthw
  876  kubectl --help
  877  kubectl delete --help
  878  kubectl delete --help | less
  879  kubectl get pods
  880  kubectl delete pod busybox
  881  kubectl get pods
  882  kubectl delete pod nginx-554b9c67f9-wlb5m
  883  kubectl get pods
  884  kubectl delete --help | more
  885  kubectl delete deployment 
  886  kubectl delete deployment nginx
  887  kubectl get pods
  888  history | grep ssh
  889  gcloud compute ssh controller-1
  890  history | grep ssh
  891  gcloud compute ssh controller-0
  892  history | grep ssh
  893  gcloud compute ssh controller-2
  894  ls
  895  clear
  896  exit
  897  ls
  898  clear
  899  ls
  900  clear
  901  exit
  902  :
  903  whoami
  904  uname -a
  905  sudo -
  906  whoami
  907  exit
  908  sudo bash
  909  glcoud info
  910  whoami
  911  which gcloud
  912  gcloud
  913  gcloud info
  914  df
  915  top
  916  step
  917  stop
  918  htop
  919  brew install htop
  920  which htop
  921  htop
  922  pwd
  923  clear
  924  history | grep gloud compute
  925  history | grep gloud
  926  history | grep gcloud
  927  history | grep gcloud | grep networks
  928  history | grep gcloud | grep external
  929  history | grep gcloud | grep firewall-rules
  930  gcloud config get-value compute/region
  931  gcloud components update
  932  history | grep gcloud | grep addresses create
  933  history | grep gcloud | grep addresses
  934  gcloud compute addresses list --filter="name=('kthw')"
  935  history | grep gcloud | grep "controller-"
  936  history | grep gcloud | grep "create controller-"
  937  history | grep gcloud | grep "create worker-"
  938  ping controller-1
  939  gcloud compute ssh controller-0
  940  KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kthw \\n  --region $(gcloud config get-value compute/region) \\n  --format 'value(address)'); echo $KUBERNETES_PUBLIC_ADDRESS 
  941  gpg
  942  brew install gnupg
  943  which docker
  944  man docker
  945  docker --version
  946  docker --help
  947  docker --version
  948  brew docker update
  949  brew update docker
  950  brew upgrade docker
  951  which docker
  952  docker
  953  brew install docker docker-machine
  954  brew cask upgrade virtualbox
  955  brew install virtualbox
  956  brew cask install virtualbox
  957  history
  958  docker-machine
  959  docker-machine create --driver virtualbox default
  960  docker-machine ls
  961  docker-machine start default
  962  docker-machine env
  963  eval $(docker-machine env)
  964  docker-machine ls
  965  docker-machine env default
  966  docker run
  967  docker run hello-world
  968  docker --help
  969  docker -l debug
  970  docker -l debug run hello-world
  971  docker --log-level debug run hello-world
  972  docker --log-level foo run hello-world
  973  docker --log-level info run hello-world
  974  docker -D
  975  docker -D --log-level debug run hello-world
  976  docker ls
  977  docker-machine ls
  978  docker-machine stop
  979  docker-machine start default
  980  cd
  981  ssh 34.94.104.8
  982  history | grep ssh
  983  ssh calmo1@34.94.104.8
  984  cd .ssh
  985  ls
  986  cat known_hosts
  987  ssh root@34.94.104.8
  988  ssh kcalmond@34.94.104.8
  989  ll config
  990  cat config
  991  ll
  992  ssh -i kcalmond-ssh-key 34.94.104.8
  993  ssh -i kcalmond-ssh-key kcalmond@34.94.104.8
  994  cd
  995  ls
  996  whoami
  997  mount
  998  cd /private
  999  cd var
 1000  ls
 1001  cd folders
 1002  ls
 1003  cd w2
 1004  ls
 1005  cd 32wxknks1x189hpr8qcmd66h0000gn
 1006  ll
 1007  ll 0
 1008  ll C
 1009  ll T
 1010  ll
 1011  cd Cleanup\ At\ Startup
 1012  cd /Volumes
 1013  ll
 1014  cd SAMSUNGUSB
 1015  ll
 1016  du -s
 1017  du -s KREL
 1018  cd KREL
 1019  ll
 1020  cd ..
 1021  rm -rf ./KREL
 1022  du VMWPKS
 1023  cd VMWPKS
 1024  ll
 1025  du -s VMW\ PKS\ Specialist.xmind
 1026  man du
 1027  du -g VMW\ PKS\ Specialist.xmind
 1028  du -k VMW\ PKS\ Specialist.xmind
 1029  du -m VMW\ PKS\ Specialist.xmind
 1030  ll
 1031  cd ..
 1032  ll
 1033  du -g WD_MBProBackup
 1034  ll
 1035  ll 201
 1036  ll 2017
 1037  ll 2017/2017
 1038  du -g R_MBProBackup
 1039  cd
 1040  clear
 1041  docker --verison
 1042  docker --version
 1043  brew upgrade docker
 1044  docker --version
 1045  docker -v
 1046  pwd
 1047  ll
 1048  cd VirtualBox\ VMs
 1049  ll
 1050  htop
 1051  ll
 1052  cd UbuntuDesktop
 1053  ll
 1054  cd Logs
 1055  ll
 1056  tail -f VBox.log
 1057  vim VBox.log
 1058  tail -f *.log
 1059  cd
 1060  pwd
 1061  ll
 1062  cd VirtualBox\ VMs
 1063  ll
 1064  cd UbuntuDesktop
 1065  ll
 1066  cd Logs
 1067  ll
 1068  vim VBox.log.3
 1069  ll
 1070  pwd
 1071  cd ../
 1072  exit
 1073  pwd
 1074  ll
 1075  cd VirtualBox\ VMs
 1076  ll
 1077  ls -al
 1078  docker --version
 1079  docker run hello-world
 1080  docker run --detach --publish=80:80 --name=webserver nginx
 1081  ls
 1082  ll
 1083  pwd
 1084  cd
 1085  docker container ls
 1086  docker container ps
 1087  docker container stop webserver
 1088  docker ls
 1089  docker container ls
 1090  docker image ls
 1091  docker image rm nginx
 1092  docker ls
 1093  docker container ls
 1094  docker container start webserver
 1095  docker container ls
 1096  docker container ls -a
 1097  docker container stop webserver
 1098  docker container ls -a
 1099  docker image ls
 1100  docker image rm nginx
 1101  docker image rm -f nginx
 1102  docker image ls
 1103  cd
 1104  cd Downloads
 1105  ls
 1106  ls -alt | head
 1107  vim webinar-932521828.ics
 1108  vim webinar-950564589.ics
 1109  gcloud info
 1110  gcloud components update
 1111  gcloud compute instances
 1112  gcloud compute instances list
 1113  gcloud -q compute instances list
 1114  gcloud --help
 1115  gcloud compute forwarding-rules list
 1116  gcloud compute target-pools  list
 1117  gcloud compute http-health-checks  list
 1118  gcloud config get-value compute/zone
 1119  gcloud compute instances delete \\n  controller-0 controller-1 controller-2 \\n  worker-0 worker-1 worker-2 \\n  --zone $(gcloud config get-value compute/zone)
 1120  gcloud -q compute forwarding-rules delete kubernetes-forwarding-rule \\n    --region $(gcloud config get-value compute/region)\n\n  gcloud -q compute target-pools delete kubernetes-target-pool\n\n  gcloud -q compute http-health-checks delete kubernetes\n\n  gcloud -q compute addresses delete kubernetes-the-hard-way
 1121  gcloud compute firewall-rules list
 1122  gcloud -q compute firewall-rules delete \\n  kthw-allow-nginx-service \\n  kthw-allow-internal \\n  kthw-allow-external \\n  kthw-allow-health-check
 1123  {\n  gcloud -q compute routes delete \\n    kubernetes-route-10-200-0-0-24 \\n    kubernetes-route-10-200-1-0-24 \\n    kubernetes-route-10-200-2-0-24\n\n  gcloud -q compute networks subnets delete kubernetes\n\n  gcloud -q compute networks delete kthw\n}
 1124  clear
 1125  cd .ssh
 1126  ll
 1127  vim config
 1128  cd
 1129  cd vmshare
 1130  ll
 1131  vim foo
 1132  htop
 1133  ip address
 1134  ifconfig
 1135  ifconfig | more
 1136  htop
 1137  pwd
 1138  cd
 1139  ll
 1140  cd git
 1141  ll
 1142  cd kubernetes-the-hard-way.git
 1143  ll
 1144  cd ..
 1145  cd kubernetes-the-hard-way.git
 1146  ll
 1147  cd ..
 1148  pwd
 1149  ls
 1150  cd GitHub
 1151  ll
 1152  cd kuard
 1153  ll
 1154  pwd
 1155  cd
 1156  docker ps
 1157  sudo find
 1158  sudo find / 2
 1159  sudo find --help
 1160  sudo find / 2>>/dev/null | grep -i hyperdock
 1161  sudo find / 2>>/dev/null | grep -i hyperdock > hyperdock_file_paths.out &
 1162  brew uninstall 
 1163  ps
 1164  tail -f *.out
 1165  ps
 1166  ls
 1167  wc -l hyperdock_file_paths.out
 1168  brew uninstall hyperdock
 1169  sudo rm < cat ./hyperdock_file_paths.out
 1170  pwd
 1171  sudo rm < `cat ./hyperdock_file_paths.out`
 1172  for file in `cat ./hyperdock_file_paths.out` do rm $file\ndone
 1173  for file in `cat ./hyperdock_file_paths.out` do rm $file\n\n
 1174  for file in `cat ./hyperdock_file_paths.out` do \n\n\nrm ($file)
 1175  rm hyperdock_file_paths.out
 1176  history
 1177  ! 1161
 1178  sudo find / 2>>/dev/null | grep -i hyperdock > hyperdock_file_paths.out &
 1179  ps
 1180  ls
 1181  tail -f hyperdock_file_paths.out
 1182  tail hyperdock_file_paths.out
 1183  vim hyperdock_file_paths.out
 1184  sudo find / 2>>/dev/null | grep -i hyperdock
 1185  rm hyperdock_file_paths.out
 1186  sudo find / 2>>/dev/null | grep -i hyperdock > hyperdock_file_paths.out &
 1187  ls
 1188  ls -al
 1189  cat hyperdock_file_paths.out
 1190  ps
 1191  rm hyperdock_file_paths.out
 1192  sudo find / 2>>/dev/null | grep -i hyperdock >> files.out
 1193  vim files.out
 1194  head files.out
 1195  mv files.out hdfiles.out
 1196  head hdfiles.out > smallhdfiles.out
 1197  rm -i foo
 1198  rm -i "$(< smallhdfiles.out)"
 1199  ls /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask/Casks/
 1200  ls /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask/Casks/ | more
 1201  stat
 1202  vim foo
 1203  stat foo
 1204  man stat
 1205  stat -l foo
 1206  stat foo
 1207  stat bar
 1208  cat smallhdfiles.out
 1209  stat /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask/Casks/hyperdock.rb
 1210  history | head
 1211  history -30
 1212  rm -i $(< smallhdfiles.out)"\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny\ny
 1213  history | head
 1214  whoami
 1215  history
 1216  rm -i $(< smallhdfiles.out)
 1217  cat smallhdfiles.out
 1218  rm -i "$(< smallhdfiles.out)"
 1219  for file in `cat ./smallhdfiles.out`; do\necho "$file"\ndone
 1220  for file in `cat ./smallhdfiles.out`; do\necho $file\ndone
 1221  rm -i /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel\ Iris\ Pro\ Graphics/functions.data
 1222  vim smallhdfiles.out
 1223  history | more
 1224  rm -i "$(< smallhdfiles.out)"
 1225  history
 1226  for file in `cat ./smallhdfiles.out`; do echo "$file"; done
 1227  cat smallhdfiles.out
 1228  for file in `cat ./smallhdfiles.out`; do echo $file; done
 1229  stat /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel\ Iris\ Pro\ Graphics/functions.data
 1230  ls /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel Iris Pro Graphics/
 1231  ls /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/
 1232  pwd
 1233  ls
 1234  ls *.out
 1235  grep \ hdfiles.out
 1236  egrep \ hdfiles.out
 1237  cat hdfiles.out
 1238  grep ' ' hdfiles.out
 1239  grep ' ' hdfiles.out | wc -l
 1240  rm /Users/calmond/Library/PreferencePanes/HyperDock.prefpane/Contents/Frameworks/Sparkle.framework/Versions/A/Resources/Sparkle Installer.app/Contents/PkgInfo
 1241  rm /Users/calmond/Library/PreferencePanes/HyperDock.prefpane/Contents/Frameworks/Sparkle.framework/Versions/A/Resources/Sparkle\ Installer.app/Contents/PkgInfo
 1242  pwd
 1243  cat smallhdfiles.out
 1244  vim smallhdfiles.out
 1245  grep Data smallhdfiles.out
 1246  grep metal smallhdfiles.out
 1247  (IFS=$'\n';for file in `grep metal smallhdfiles.out`;do ls $file; done)
 1248  (IFS=$'\n';for file in `grep Iris smallhdfiles.out`;do ls $file; done)
 1249  (IFS=$'\n';for file in `grep Iris smallhdfiles.out`;do ls "$file"; done)
 1250  (IFS=$'\n';for file in `grep Iris smallhdfiles.out`;do echo "$file"; done)
 1251  ls /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel Iris Pro Graphics/functions.data
 1252  ls /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel\ Iris\ Pro\ Graphics/functions.data
 1253  ls /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel\ Iris\ Pro\ Graphics
 1254  touch /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel\ Iris\ Pro\ Graphics\functions.data
 1255  ls /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel\ Iris\ Pro\ Graphics
 1256  cd /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel\ Iris\ Pro\ Graphicsls
 1257  cd /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal/Intel\ Iris\ Pro\ Graphics
 1258  ls -al
 1259  touch ./functions.data
 1260  ls -al
 1261  cd
 1262  (IFS=$'\n';for file in `grep Iris smallhdfiles.out`;do ls "$file"; done)
 1263  cat smallhdfiles.out
 1264  vim hdfiles.out
 1265  cat hdfiles.out
 1266  sudo rm -rf /Users/calmond/Library/PreferencePanes/HyperDock.prefpane
 1267  less hdfiles.out
 1268  history | grep find
 1269  sudo find / 2>>/dev/null | grep -i hyperdock >> files.out
 1270  wc -l files.out
 1271  cat files.out
 1272  rm -rf /private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper/com.apple.metal
 1273  rm -rf /System/Volumes/Data/Users/calmond/Library/Caches/de.bahoom.HyperDock-Helper
 1274  rm -rf /System/Volumes/Data/private/var/folders/w2/32wxknks1x189hpr8qcmd66h0000gn/C/de.bahoom.HyperDock-Helper
 1275  rm -rf /Users/calmond/Library/Caches/de.bahoom.HyperDock-Helper
 1276  rm -rf /Users/calmond/Library/Caches/com.plausiblelabs.crashreporter.data/de.bahoom.HyperDock-Helper
 1277  rm files.out
 1278  sudo find / 2>>/dev/null | grep -i hyperdock >> files.out
 1279  cat files.out
 1280  rm -rf /System/Volumes/Data/Users/calmond/Library/Application Support/HyperDock
 1281  rm -rf /System/Volumes/Data/Users/calmond/Library/Preferences/de.bahoom.HyperDock.*
 1282  rm -rf /Users/calmond/Library/Application Support/HyperDock/lic.hdlicense
 1283  rm -rf /Users/calmond/Library/Preferences/de.bahoom.HyperDock.*
 1284  rm files.out
 1285  sudo find / 2>>/dev/null | grep -i hyperdock >> files.out
 1286  cat files.out
 1287  rm -rf /System/Volumes/Data/Users/calmond/Library/Application Support/HyperDock
 1288  rm -rf /Users/calmond/Library/Application Support/HyperDock
 1289  rm -rf /Users/calmond/Library/Application Support/
 1290  ls -al /System/Volumes/Data/Users/calmond/Library/Application Support/
 1291  pwd
 1292  ls
 1293  eixt
 1294  exit
 1295  history | grep find
 1296  uname -a
 1297  whoami
 1298  hostname
 1299  sudo bash
 1300  which tmux
 1301  ll
 1302  pwd
 1303  cd Library
 1304  ll
 1305  cd Application\ Support/BraveSoftware
 1306  ll
 1307  cd Brave-Browser
 1308  ll
 1309  pwd
 1310  cd ..
 1311  tar -cvf ./Brave-Browser Brave-Browser.tar
 1312  tar -cvf Brave-Browser.tar ./Brave-Browser
 1313  whoami
 1314  man tar
 1315  tar -cvf file.tar Brave-Browser
 1316  tar -cvf Brave-Browser file.tar
 1317  touch foo
 1318  ls -al
 1319  sudo tar -cvf ./braveold.tar Brave-Browser
 1320  ll
 1321  pwd
 1322  sudo chmod 766 braveold.tar
 1323  ll
 1324  mv braveold.tar ~/Google\ Drive/BraveMigration
 1325  chown calmond Brave-Browser
 1326  sudo chown calmond braveold.tar
 1327  ll
 1328  ls -al ~/Google\ Drive
 1329  ll
 1330  sudo mv braveold.tar ~/Google\ Drive/BraveMigration
 1331  cd ~/Google\ Drive/BraveMigrationll
 1332  cd ~/Google\ Drive/BraveMigration
 1333  ll
 1334  htop
 1335  dig 208.67.222.222
 1336  man ssh
 1337  ssh -l AlmondAdmin 192.168.0.25:2222
 1338  ping 192.168.0.25
 1339  man ssh
 1340  ssh -p 2222 -l AlmondAdmin 192.168.0.25
 1341  df
 1342  df -g
 1343  ssh -p 2222 -l AlmondAdmin 192.168.0.25
 1344  df
 1345  df -g
 1346  ssh -p 2222 -l AlmondAdmin 192.168.0.25
 1347  history
 1348  ssh -p 2222 -l AlmondAdmin 192.168.0.25
 1349  man cp
 1350  htop
 1351  mount
 1352  df
 1353  cd /var/log
 1354  ls
 1355  ls -alt
 1356  tail -f system.log
 1357  ls -alt | head
 1358  ioreg -p IOUSB -w0 -l
 1359  exit
 1360  cd
 1361  clear
 1362  exit
 1363  clear
 1364  ioreg -p IOUSB -w0 | sed 's/[^o]*o //; s/@.*$//' | grep -v '^Root.*'
 1365  pwd
 1366  cd android
 1367  ls
 1368  cd platform-tools
 1369  ll
 1370  ./adb
 1371  /Users/calmond/android/platform-tools/adb ; exit;
 1372  ./adb -l
 1373  pwd
 1374  ./adb -l
 1375  adb
 1376  ./adb
 1377  ./adb DEVICE
 1378  ./adb DEVICES
 1379  ./adb -l
 1380  ./adb -L
 1381  ./adb -L DEVICES
 1382  ./adb devices
 1383  history
 1384  ioreg -p IOUSB -w0 | sed 's/[^o]*o //; s/@.*$//' | grep -v '^Root.*'
 1385  ./adb devices
 1386  echo $PATH
 1387  pushd ~
 1388  ls -al | more
 1389  vim .zshrc
 1390  echo $PATH
 1391  vim .bash_profile
 1392  vim .zshrc
 1393  source .zshrc
 1394  echo $PATH
 1395  which adb
 1396  pwd
 1397  popd
 1398  ll
 1399  cd ..
 1400  ll
 1401  file fastboot-mac
 1402  chmod 755 fastboot-mac
 1403  pwd
 1404  fastboot oem get_identifier_token
 1405  sudo fastboot oem get_identifier_token
 1406  fastboot oem get_identifier_token
 1407  sudo spctl --master-disable
 1408  fastboot oem get_identifier_token
 1409  cd
 1410  history | grep ssh
 1411  cd /var/log
 1412  ls
 1413  ls -alt | more
 1414  vim system.log
 1415  tail -f system.log
 1416  grep -i usb system.log
 1417  cd
 1418  sudo log collect —output logcollection
 1419  sudo log collect --output logs.archive
 1420  pwd
 1421  whoami
 1422  sudo log collect
 1423  ls
 1424  sudo log show system_logs.logarchive
 1425  ll
 1426  sudo log show system_logs.logarchive | grep -i 'usbmsc'
 1427  vim foo
 1428  ls
 1429  vim foo
 1430  rm -rf ./.foo.swp
 1431  ls -al
 1432  rm .foot.swp
 1433  ls -al | head
 1434  ls -al | more
 1435  vim foo
 1436  cd
 1437  clear
 1438  ls
 1439  mount
 1440  cd /Volumes/Untitled
 1441  ls -al
 1442  ls -alt
 1443  du -s *
 1444  du -s .
 1445  sudo du -s .
 1446  rm -rf .Spotlight-V100
 1447  sudo bash
 1448  cd
 1449  rm foo
 1450  clear
 1451  dig www.google.com
 1452  ssh -l pi 192.168.0.20
 1453  exit
 1454  ll
 1455  cd tmp
 1456  cd
 1457  ssh pi@192.168.0.20
 1458  pwd
 1459  cd .shh
 1460  cd .ssh
 1461  ls
 1462  cat known_hosts
 1463  exit
 1464  whoami
 1465  ssh chris@192.168.0.116
 1466  htop
 1467  cd
 1468  ip addres
 1469  ip address
 1470  ifconfig
 1471  ifconfig | grep 192
 1472  exit
 1473  whoami
 1474  htop
 1475  dig www.google.com
 1476  ip address
 1477  which ip
 1478  ifocnfig
 1479  ifconfig
 1480  ping 192.168.0.104
 1481  ssh calmond@192.168.0.104
 1482  cat /var/log/system.log | grep -i sshd
 1483  adlskfjasd;lfj
 1484  tail -f /var/log/system.log
 1485  cat /var/log/system.log | grep -i sshd
 1486  exit
 1487  ll
 1488  df
 1489  fdisk
 1490  man fdisk
 1491  df
 1492  pwd
 1493  cd /var/log
 1494  ls
 1495  ls -alt
 1496  ls -alt | more
 1497  tail -f system.log
 1498  pushd ~
 1499  vim hdfiles.out
 1500  ls *.out
 1501  ls -alt
 1502  ls -al *.out
 1503  sudo bash
 1504  tail -f /var/tmp/allfiles.out
 1505  ls -al /var/tmp/allfiles.out
 1506  ps
 1507  exit
 1508  pwd
 1509  ls
 1510  clear
 1511  wc -l /var/tmp/allfiles.out
 1512  grep -i teamviewer /var/tmp/allfiles.out
 1513  which teamviewer
 1514  sudo bash
 1515  brew
 1516  brew cask
 1517  brew cask uninstall teamviewer
 1518  ls -al /var/tmp/allfiles.out
 1519  grep -i teamviewer /var/tmp/allfiles.out
 1520  exit
 1521  htop
 1522  tail -f /var/log/system.log
 1523  ls
 1524  ll
 1525  cd android
 1526  cd
 1527  brew cask install iterm2
 1528  sudo chown -R $(whoami) /usr/local/var/homebrew
 1529  brew cask install iterm2
 1530  brew update
 1531  exit
 1532  ls
 1533  ^[[200~compaudit | xargs chmod g-w,o-W
 1534  compaudit | xargs chmod g-w,o-w
 1535  compaudit
 1536  whoami
 1537  sudo bash
 1538  pwd
 1539  exit
 1540  pwd
 1541  source .zshrc
 1542  pwd
 1543  cd
 1544  pwd
 1545  source .zshrc
 1546  pwd
 1547  ll
 1548  cd Library
 1549  ll
 1550  cd ..
 1551  chsh
 1552  exit
 1553  ll
 1554  cd
 1555  clear
 1556  diskutil 
 1557  diskutil list
 1558  df
 1559  df -G
 1560  df -m
 1561  df -b
 1562  df -m
 1563  df -foo
 1564  df -g
 1565  diskutil list
 1566  diskutil apfs
 1567  diskutil apfs list
 1568  diskutil list
 1569  diskutil apfs resizeContainer disk1 300g
 1570  tmutil
 1571  tmutil deletelocalsnapshots
 1572  tmutil deletelocalsnapshots /
 1573  diskutil list
 1574  diskutil apfs resizeContainer disk1 300g
 1575  diskutil list
 1576  diskutil apfs resizeContainer disk1 450g
 1577  diskutil list
 1578  htop
 1579  cd ~Downloads
 1580  cd
 1581  cd Downloads
 1582  ls
 1583  ls -alt | head
 1584  ssh pi@192.168.0.20
 1585  ip a
 1586  ip
 1587  whoami
 1588  ifconfig
 1589  hostname
 1590  ping calmond-OSX
 1591  ipconfig en7
 1592  ipconfig
 1593  ipconfig -a
 1594  ifconfig -a
 1595  dig
 1596  dig www.goof.com
 1597  dig www.whatever.com
 1598  dig www.whatevs.com
 1599  ssh pi@pihole
 1600  ssh pi@192.168.0.20
 1601  ping 192.168.0.20
 1602  ssh -v pi@192.168.0.20
 1603  ping 192.168.0.20
 1604  ifconfig en7
 1605  ifconfig a
 1606  ifconfig
 1607  ping 192.168.0.20
 1608  netstat -rn
 1609  ifconfig -a
 1610  ifconfig en0
 1611  ifconfig en0 > netstat_wifionly
 1612  netstat -rn >> netstat_wifionly
 1613  vi netstat_wifionly
 1614  ifconfig -a
 1615  ifconfig en3 > netstat_both
 1616  netstat -rn >> netstat_both
 1617  vim netstat_both
 1618  ifconfig -a
 1619  vim netstat_both
 1620  ifconfig -a
 1621  vim netstat_both
 1622  ifconfig -a
 1623  netstat -rn
 1624  ifconfig -a
 1625  netstat -rn
 1626  netstat -state
 1627  netstat -routtable
 1628  netstat -r
 1629  dig www.cnn.com
 1630  ping 192.168.0.1
 1631  ip a
 1632  ifconfig
 1633  ping 192.168.0.1
 1634  dig www.microsoft.com
 1635  ping google.com
 1636  ifconfig
 1637  ping 192.168.0.1
 1638  ifconfig
 1639  route -rn
 1640  route -n
 1641  netstat -rn
 1642  sudo route -n flush; 
 1643  sudo route -n flush; sudo route -n flush; sudo route -n flush; sudo route -n flush; 
 1644  netstat -rn
 1645  sudo arp -a
 1646  sudo arp -a -d
 1647  sudo arp -a
 1648  ifconfig | grep 219
 1649  sudo arp -a
 1650  arp -a
 1651  sudo arp -a
 1652  ifconfig
 1653  dig www.slashdot.org
 1654  mount
 1655  df
 1656  df -g
 1657  ifconfig | less
 1658  ifconfig
 1659  ping 192.168.0.1
 1660  ping 192.168.0.2
 1661  netstat -rn
 1662  route flush
 1663  sudo bash
 1664  htop
 1665  htio
 1666  htop
 1667  ping 192.168.0.1
 1668  dig www.cnn.com
 1669  clear
 1670  ip a
 1671  ip
 1672  exit
 1673  ifconfig
 1674  ping 192.168.0.100
 1675  ping 192.168.0.25
 1676  netstat -rn
 1677  ping 192.168.0.25
 1678  netstat -rn
 1679  ifconfig
 1680  ping 192.168.0.25
 1681  arp -a
 1682  ifconfig
 1683  netstat -rn
 1684  ping 192.168.0.1
 1685  ping 192.168.0.25
 1686  tracert
 1687  traceroute
 1688  traceroute 192.168.0.25
 1689  route -n
 1690  route
 1691  man route
 1692  route list
 1693  route -n
 1694  route --help
 1695  route help
 1696  route -h
 1697  netstat -rn
 1698  ping 192.168.0.25
 1699  ping 192.168.0.1
 1700  ping 192.168.0.25
 1701  netstat -rn
 1702  ping 192.168.0.25
 1703  history | grep ssh
 1704  ssh -p 2222 -l AlmondAdmin 192.168.0.25
 1705  ping 192.168.0.25
 1706  ping 192.168.0.60
 1707  ping 192.168.0.61
 1708  ping 192.168.0.62
 1709  ping 192.168.0.63
 1710  ping 192.168.0.64
 1711  ping 192.168.0.65
 1712  ping 192.168.0.66
 1713  ping 192.168.0.67
 1714  ping 192.168.0.60
 1715  ifconfig
 1716  ping 172.16.0.30
 1717  history | grep ssh
 1718  ssh -p 2222 -l AlmondAdmin 172.16.159.62
 1719  ssh -p 2222 -l AlmondAdmin 172.16.149.62
 1720  ping 172.16.1.10
 1721  ssh -p 2222 -l AlmondAdmin 172.16.1.10
 1722  ping 172.16.0.30
 1723  ping 172.16.1.10
 1724  ping 172.16.182.23
 1725  ping 172.16.0.1
 1726  ifconfig -a
 1727  ping 192.168.0.1
 1728  ping 192.168.1.1
 1729  ping 192.168.0.1
 1730  ifconfig -a
 1731  ping 192.168.0.1
 1732  ping 192.168.1.1
 1733  ifconfig -a
 1734  ip a
 1735  ifconfig
 1736  dig www.who.org
 1737  dhclient -r
 1738  dig www.cloudflare.com
 1739  dig amazon.com
 1740  ping 172.16.0.20
 1741  dig amazon.com
 1742  dig reddit.com
 1743  mount
 1744  /Volumes/system-boot/README ; exit;
 1745  mout
 1746  mount
 1747  cd /Volumes/system-boot
 1748  ll
 1749  vim README
 1750  vim meta-data
 1751  vim user-data
 1752  ls
 1753  ll
 1754  vim cmdline.txt
 1755  ls *.txt
 1756  vim usercfg.txt
 1757  vim user-data
 1758  cd
 1759  umount /Volumes/system-boot
 1760  sudo umount /Volumes/system-boot
 1761  sudo diskutil unmount /Volumes/system-boot
 1762  mount
 1763  cd /Volumes/system-boot
 1764  ls
 1765  vim user-data
 1766  cp user-data orig-user-data
 1767  vim user-data
 1768  ping 172.16.10.11
 1769  mkpasswd
 1770  cd
 1771  mkpasswd
 1772  brew install mkpasswd
 1773  docker run -it --rm alpine mkpasswd -m des helloworld
 1774  pwd
 1775  ll
 1776  cd vmshare
 1777  ll
 1778  pwd
 1779  cd
 1780  cd .ssh
 1781  ll
 1782  cat kcalmond-ssh-key.pub
 1783  cd ..
 1784  history  | grep disk
 1785  sudo diskutil unmount /Volumes/system-boot
 1786  pwd
 1787  ll
 1788  cd system-boot
 1789  ll
 1790  vim user-data
 1791  cd
 1792  exit
 1793  cd /Volumes/system-boot
 1794  cat cmdline.txt
 1795  sudo cat cmdline.txt
 1796  ls
 1797  ls -al
 1798  vim cmdline.txt
 1799  sudo bash
 1800  ll
 1801  cat ssh
 1802  cat config.txt
 1803  cat cmdline.txt
 1804  sudo cat ./cmdline.txt
 1805  cp cmdline.txt ~
 1806  sudo cp cmdline.txt ~
 1807  ls -al
 1808  file *
 1809  lsattr cmdline.txt
 1810  ls -l0
 1811  ls -lO
 1812  chflags
 1813  chflags cmdline.txt
 1814  showflags
 1815  ls -lo
 1816  ls -lO
 1817  ls -lO cmdline.txt
 1818  touch foo.txt
 1819  vim foo.txt
 1820  chmod 777 foo.txt
 1821  ls
 1822  ll
 1823  cat foo.txt
 1824  rm foo.txt
 1825  ls
 1826  ll
 1827  vim foo.txt
 1828  rm cmdline.txt
 1829  ll
 1830  mv foo.txt cmdline.txt
 1831  cat cmdline.txt
 1832  ll
 1833  more config.txt
 1834  cd
 1835  sudo diskutil unmount /Volumes/system-boot
 1836  df
 1837  ping 172.16.0.10
 1838  ping 172.16.1.10
 1839  cd
 1840  clear
 1841  diskutil list
 1842  sudo disktutil unmountDisk /dev/disk3
 1843  sudo diskutil unmountDisk /dev/disk3
 1844  sudo dd bs=1m if=Downloads/ubuntu-18.04.4-server-arm64.iso of=/dev/disk3; sync
 1845  ssh pi@172.16.0.5
 1846  clear
 1847  clear
 1848  cd
 1849  clear
 1850  cd
 1851  ssh 172.16.2.11
 1852  cd
 1853  ssu ubuntu@172.16.2.13
 1854  ssu ubuntu@172.16.2.14
 1855  ssh ubuntu@172.16.2.14
 1856  clear
 1857  cd
 1858  ssu ubuntu@172.16.2.12
 1859  ssh ubuntu@172.16.2.12
 1860  dig www.cloudflare.com
 1861  exit
 1862  ssh ubuntu@172.16.2.13
 1863  dig www.cloudflare.com
 1864  exit
 1865  ssu ubuntu@172.16.2.11
 1866  ssh ubuntu@172.16.2.11
 1867  dig www.cloudflare.com
 1868  exit
 1869  dig www.cloudflare.com
 1870  exit
 1871  cd Downloads
 1872  ls -alt | head
 1873  unxz
 1874  pwd
 1875  unxz ./ubuntu-18.04.4-preinstalled-server-arm64+raspi3.img.xz
 1876  ll
 1877  ll ubuntu-*
 1878  htop
 1879  mv ~/Downloads/RainerFlowersSunset.jpg ~/Pictures/EarthP
 1880  htop
 1881  traceroute
 1882  traceroute 192.168.0.1
 1883  ping 172.16.2.14
 1884  ifconfig
 1885  dig www.cnn.com
 1886  ping 172.16.01
 1887  ping 172.16.05
 1888  ping 172.16.0.5
 1889  nslookup
 1890  ssh chris@172.16.2.14
 1891  ssh ubuntu@172.16.2.14
 1892  ssh ubuntu@172.16.2.11
 1893  vim .ssh/known_hosts
 1894  ssh ubuntu@172.16.2.11
 1895  ssh ubuntu@172.16.2.13
 1896  ssh ubuntu@172.16.2.12
 1897  exit
 1898  ifconfig -a
 1899  arp -a
 1900  ping 172.16.0.1
 1901  ping 172.16.0.10
 1902  ping 172.16.0.20
 1903  ping 172.16.0.25
 1904  ping 172.16.0.10
 1905  ping 172.16.0.2
 1906  ifconfig
 1907  ping 172.16.010
 1908  ping 172.16.0.10
 1909  arp -a
 1910  ping 172.16.0.20
 1911  ping 172.16.0.25
 1912  ssh chris@192.168.100.15
 1913  ssh AlmondAdmin@192.168.100.15
 1914  ssh AlmondAdmin@192.168.100.15:2222
 1915  ping 192.168.100.12
 1916  history | grep ssh
 1917  ssh AlmondAdmin@192.168.100.15:2222
 1918  ping 192.168.100.15
 1919  ping 192.168.100.10
 1920  ifconfig
 1921  htop
 1922  ping 192.168.0.1
 1923  dig www.cnn.com
 1924  ping 192.168.0.1
 1925  ping 192.168.0.5
 1926  ping 192.168.0.1
 1927  dig wwww.cnn.com
 1928  ip a
 1929  ifconfig -a
 1930  whoami
 1931  netstat -nat | grep 4000
 1932  ping 192.168.0.1
 1933  htop
 1934  ifconfig -a
 1935  exit
 1936  dig --help
 1937  dig -h
 1938  dig www.cnn.com
 1939  cat /etc/resolv.conf 
 1940  ping 192.168.0.5
 1941  dig google.com
 1942  cat /etc/resolv.conf
 1943  nslookup mail.google.com
 1944  ifconfig -a
 1945  nxserver
 1946  cd git
 1947  cd
 1948  ls /etc/NX
 1949  /etc/NX/nxserver --restart
 1950  sudo /etc/NX/nxserver --restart
 1951  dig www.cnn.com
 1952  dig www.slashdot.org
 1953  cd
 1954  exit
 1955  dig www.slashdot.org
 1956  ifconfig -a
 1957  history
 1958  sudo /etc/NX/nxserver --restart
 1959  ping 192.168.0.1
 1960  ping 192.168.100.101
 1961  ifconfig -a
 1962  sudo /etc/NX/nxserver --restart
 1963  ping 192.168.0.1
 1964  dig www.cnn.com
 1965  ping 192.168.100.94
 1966  ifconfig -a
 1967  cd /Volumes
 1968  ll
 1969  cd boot
 1970  ll
 1971  touch ssh
 1972  ll
 1973  vim cmdline.txt
 1974  cat cmdline.txt
 1975  exit
 1976  cd Downloads
 1977  ls -alt
 1978  ls -alt | head
 1979  cd /Volumes
 1980  ll
 1981  history | grep NX
 1982  /etc/NX/nxserver --stop
 1983  sudo /etc/NX/nxserver --stop
 1984  cd
 1985  clear
 1986  ip a
 1987  ifconfig -a
 1988  ping 192.168.1.1
 1989  ping 192.168.1.4
 1990  ping 192.168.0.1
 1991  ping 192.168.4.1
 1992  ifconfig -a
 1993  ping 192.168.4.2
 1994  ping 192.168.4.1
 1995  ping 192.168.100.69
 1996  sudo /etc/NX/nxserver --start
 1997  ip a
 1998  ifconfig -a
 1999  ping 192.168.0.1
 2000  ifconf
 2001  ifconfig
 2002  echo $SHELL
 2003  cd .oh-my-zsh
 2004  ll
 2005  pwd
 2006  cd ..
 2007  ll
 2008  cd git
 2009  ll
 2010  cd GitHub
 2011  ll
 2012  cd ..
 2013  cd 
 2014  terraform
 2015  terraform version
 2016  brew update terraform
 2017  brew upgrade terraform
 2018  sudo chown -R $(whoami) /usr/local/Frameworks /usr/local/etc/bash_completion.d /usr/local/lib/pkgconfig /usr/local/share/aclocal /usr/local/share/locale /usr/local/share/man /usr/local/share/man/man1 /usr/local/share/man/man3 /usr/local/share/man/man5 /usr/local/share/man/man7 /usr/local/share/man/man8 /usr/local/share/zsh /usr/local/share/zsh/site-functions /usr/local/var/homebrew/linked /usr/local/var/homebrew/locks
 2019  chmod u+w /usr/local/Frameworks /usr/local/etc/bash_completion.d /usr/local/lib/pkgconfig /usr/local/share/aclocal /usr/local/share/locale /usr/local/share/man /usr/local/share/man/man1 /usr/local/share/man/man3 /usr/local/share/man/man5 /usr/local/share/man/man7 /usr/local/share/man/man8 /usr/local/share/zsh /usr/local/share/zsh/site-functions /usr/local/var/homebrew/linked /usr/local/var/homebrew/locks
 2020  brew upgrade terraform
 2021  brew
 2022  brew doctor
 2023  brew link dockerer-machine
 2024  brew link dockere-machine
 2025  brew link docker-machine
 2026  brew link --overwrite docker-machine pixman glib jpeg
 2027  cd .oh-my-zsh
 2028  cd custom
 2029  ll
 2030  vim calmond-aliases.zsh
 2031  vim calmond-shellinit.zsh
 2032  ll
 2033  chmod 755 calmond-*
 2034  vim calmond-shellinit.zsh
 2035  cd
 2036  source ~/.oh-my-zsh/custom/calmond-shellinit.zsh
 2037  vim calmond-shellinit.zsh
 2038  vim .oh-my-zsh/custom/calmond-shellinit.zsh
 2039  brew doctor
 2040  brew install kctx
 2041  ls -al /usr/local/Homebrew
 2042  sudo chown -R calmond /usr/local/Homebrew/*
 2043  sudo chown -R calmond /usr/local/Homebrew/.git
 2044  brew install kctx
 2045  brew install kubectx
 2046  pwd
 2047  ls
 2048  ls -al
 2049  chown -R calmond *
 2050  ls -al
 2051  chown -R calmond .editorconfig
 2052  sudo chown -R calmond .editorconfig
 2053  sudo chown -R calmond .github
 2054  cd /usr/local/Homebrew\n  git reset --hard origin/master
 2055  cd
 2056  brew install kubectx
 2057  brew link kubectx
 2058  pushd /usr/local/Cellar
 2059  ll
 2060  ls -al 
 2061  sudo chown calmond .
 2062  ls -al
 2063  sudo chown calmond .keepme
 2064  brew link kubectx
 2065  cd /usr/local/share
 2066  ls
 2067  ll
 2068  sudo chown -R calmond ./fishd 
 2069  pwd
 2070  ll
 2071  cd fish
 2072  ls -al
 2073  sudo chown calmond .
 2074  sudo chown -R calmond vendor_completions.d
 2075  brew link kubectx
 2076  brew doctor
 2077  brew untap
 2078  brew untap caskroom/cask
 2079  brew link gettex kubernetes-cli
 2080  brew link gettext kubernetes-cli
 2081  brew link --overwrite gettext kubernetes-cli
 2082  cd /usr/local/Homebrew && git stash && git clean -d -f
 2083  cd
 2084  brew doctor
 2085  brew install kubens
 2086  git -C "$(brew --repo homebrew/core)" fetch --unshallow
 2087  cd .kube
 2088  ll
 2089  source ~/.oh-my-zsh/custom/calmond-shellinit.zsh
 2090  exit
 2091  brew terraform upgrade
 2092  brew upgrade terraform
 2093  pushd /usr/local/Cellar
 2094  ls
 2095  ls -al
 2096  chown -R calmond *
 2097  sudo chown -R calmond *
 2098  brew upgrade terraform
 2099  terraform version
 2100  pwd
 2101  whoami
 2102  cd
 2103  sudo /etc/NX/nxserver --start
 2104  pwd
 2105  cd Downloads
 2106  ls -alt | hed
 2107  ls -alt | head
 2108  rm openSUSE-Leap-15.2-ARM-E20-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz
 2109  checksum
 2110  cat *.sha256
 2111  shasum
 2112  shasum openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz
 2113  shasum -a 256 openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz
 2114  xzcat -help
 2115  lsblk
 2116  df
 2117  cd /Volumes
 2118  ll
 2119  cd booT
 2120  cd boot
 2121  cd ..
 2122  cd boot
 2123  ll
 2124  mount
 2125  sudo umount /dev/disk4s1
 2126  cd ..
 2127  sudo umount /dev/disk4s1
 2128  diskutil unmount 
 2129  diskutil unmount /dev/disk4s1
 2130  df
 2131  diskutil list
 2132  xz
 2133  xzcat
 2134  xzcat -help
 2135  xz -help
 2136  cd ~/Downloads
 2137  tux
 2138  dd -help
 2139  man dd
 2140  xz -cd ./openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz| dd of=/dev/disk4 bs=4096 iflag=fullblock status=progress
 2141  man dd
 2142  xz -cd ./openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz| dd of=/dev/disk4 bs=4096 status=progress
 2143  xz -cd ./openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz| dd of=/dev/disk4 bs=4096
 2144  xz -cd ./openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz| sudo dd of=/dev/disk4 bs=4096
 2145  mount
 2146  df
 2147  cd /Volumes/EFI
 2148  ll
 2149  cat ubootconfig.txt
 2150  cat startup.nsh
 2151  cat config.txt
 2152  cd ..
 2153  diskutil unmount 
 2154  diskutil umount /dev/disk4
 2155  mount
 2156  diskutil umount /Volumes/EFI
 2157  mount
 2158  diskutil
 2159  diskutil list
 2160  diskutil umount /dev/disk4
 2161  diskutil unmountDisk /dev/disk4
 2162  cd ~/Downloads
 2163  xz -cd ./SLES15-SP2-JeOS.aarch64-15.2-RaspberryPi-GM.raw.xz| sudo dd of=/dev/disk4 bs=4096
 2164  mount
 2165  diskutil umount /dev/EFI
 2166  diskutil umount /Volumes/EFI
 2167  history
 2168  diskutil list
 2169  diskutil unmountDisk /dev/disk4
 2170  xz -cd ./SLES15-SP2-JeOS.aarch64-15.2-RaspberryPi-GM.raw.xz| sudo dd of=/dev/disk4 bs=4096
 2171  diskutil umount /Volumes/EFI
 2172  history
 2173  diskutil list
 2174  diskutil unmountDisk /dev/disk4
 2175  xz -cd ./openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz| sudo dd of=/dev/disk4 bs=4096
 2176  diskutil umount /Volumes/EFI
 2177  diskutil unmountDisk /dev/disk4
 2178  cd ~/Downloads
 2179  xz -cd ./openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz| sudo dd of=/dev/disk4 bs=4096
 2180  diskutil umount /Volumes/EFI
 2181  htop
 2182  history | grep NX
 2183  sudo /etc/NX/nxserver --start
 2184  ip a
 2185  ifconfig -a
 2186  sudo /etc/NX/nxserver --start
 2187  ifconfig a
 2188  ifconfig -a
 2189  sudo /etc/NX/nxserver --start
 2190  hownamt
 2191  hostname
 2192  ifconfig en0
 2193  ll
 2194  ls
 2195  ifconfig en0
 2196  sudo /etc/NX/nxserver --start
 2197  ifconfig en0
 2198  ls
 2199  ifconfig en0
 2200  history
 2201  diskutil list
 2202  mount
 2203  diskutil list
 2204  diskutil unmountDisk /dev/disk2
 2205  xz -cd ./openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz| sudo dd of=/dev/disk4 bs=4096
 2206  diskutil list
 2207  mount
 2208  xz -cd ./openSUSE-Leap-15.2-ARM-JeOS-raspberrypi4.aarch64-2020.07.08-Build1.24.raw.xz| sudo dd of=/dev/disk2 bs=4096
 2209  diskutil list
 2210  mount
 2211  diskutil umount /Volumes/EFI
 2212  exit
 2213  history | grep -i ns
 2214  history | grep -i nx
 2215  sudo /etc/NX/nxserver --start
 2216  ip a
 2217  ifconfig -a
 2218  /etc/NX/nxserver --start
 2219  whoami
 2220  sudo /etc/NX/nxserver --help
 2221  set -o vi
 2222  sudo /etc/NX/nxserver --status
 2223  sudo /etc/NX/nxserver --start --debug
 2224  sudo /etc/NX/nxserver --status
 2225  sudo /etc/NX/nxserver --restart
 2226  pwd
 2227  cd
 2228  cd .ssh
 2229  ll
 2230  ssh-keygen
 2231  ls -alt
 2232  cat do_id_rsa.pub
 2233  cd
 2234  ssh -i ~/.ssh/do_id_rsa root@159.65.72.149
 2235  pwd
 2236  ll
 2237  l
 2238  htop
 2239  pwd
 2240  clear
 2241  cd .ssh
 2242  l
 2243  history | grep ssh
 2244  ssh -i ~/.ssh/do_id_rsa root@159.65.72.149
 2245  htop
 2246  ssh -i ~/.ssh/do_id_rsa root@159.65.72.149
 2247  cd
 2248  mount
 2249  cd /Volumes
 2250  ls
 2251  ls -al
 2252  cd TMBU
 2253  ll
 2254  cd calmo-mb16.backupbundle
 2255  ll
 2256  cd bands
 2257  ll
 2258  cd ..
 2259  ..
 2260  pwd
 2261  ll
 2262  cd ..
 2263  ll
 2264  cd Time\ Machine\ Backups 1
 2265  cd Time\ Machine\ Backups\ 1
 2266  ll
 2267  cd Backups.backupdb
 2268  ll
 2269  cd ../
 2270  pwd
 2271  cd ..
 2272  ll
 2273  cd Time\ Machine\ Backups
 2274  ll
 2275  cd Backups.backupdb
 2276  ll
 2277  pwd
 2278  cd ..
 2279  cd Time\ Machine\ Backups
 2280  cd Backups.backupdb
 2281  cd calmo-mb-16
 2282  cd calmo-mb16
 2283  cd 2020-09-08-092727
 2284  ls
 2285  sudo bash
 2286  cd
 2287  sudo bash
 2288  mount
 2289  cd /Volumes
 2290  cd Time\ Machine\ Backups
 2291  ls
 2292  cd Backups.backupdb
 2293  ls
 2294  sudo bash
 2295  mount
 2296  cd /Volumes
 2297  ls
 2298  cd Time\ Machine\ Backups
 2299  ls
 2300  cd Backups.backupdb
 2301  ls
 2302  cd calmo-mb16
 2303  ls
 2304  cd 2020-09-09-074900
 2305  ls
 2306  cd Macintosh\ HD
 2307  ls
 2308  cd usr
 2309  ls
 2310  cd ..
 2311  ls -al
 2312  pwd
 2313  cd ..
 2314  ls
 2315  cd Macintosh\ HD\ -\ Data
 2316  pwd
 2317  ls
 2318  cd Users
 2319  ls
 2320  cd calmo
 2321  ls
 2322  cd Library
 2323  ls
 2324  cd Application\ Support
 2325  ls
 2326  cd Firefox
 2327  ls
 2328  ll
 2329  cd Profiles
 2330  ls -al
 2331  du -s 404cmr8e.default-release
 2332  pwd
 2333  ls -al ~/Library/Application\ Support/Firefox/Profiles
 2334  man cp
 2335  cp -Rpv ./404cmr8e.default-release ~/Library/Application\ Support/Firefox/Profiles/
 2336  cd ~/Library/Application\ Support/Firefox
 2337  ll
 2338  cd Profiles
 2339  ll
 2340  cd 404cmr8e.default-release
 2341  ll
 2342  du -s .
 2343  /Applications/Firefox.app/Contents/MacOS/firefox-bin -profilemanager &
 2344  pwd
 2345  pushd ~/Library/Application\ Support/Firefox/Profiles
 2346  ll
 2347  mv rta1fsmr.RancherSnap mv_rta1fsmr.RancherSnap
 2348  ll
 2349  ln -s ./404cmr8e.default-release ./rta1fsmr.RancherSnap
 2350  ll
 2351  /Applications/Firefox.app/Contents/MacOS/firefox-bin -profilemanager &
 2352  sudo bash
 2353  ps -aux | grep -i fire
 2354  ps -ax | grep -i fire
 2355  /Applications/Firefox.app/Contents/MacOS/firefox-bin -profilemanager &
 2356  pwd
 2357  ll
 2358  sudo reboot -h now
 2359  sudo reboot now
 2360  ps -ax
 2361  ps -ax | grep Fire
 2362  ps -ax | grep - fox
 2363  ps -ax | grep -i fox
 2364  history
 2365  /Applications/Firefox.app/Contents/MacOS/firefox-bin -profilemanager &
 2366  pwd
 2367  ll
 2368  cd ..
 2369  ll
 2370  cd kbf2c6jo.RH\ Default-1570328746994
 2371  ll
 2372  ls
 2373  ls -al | grep -i lock
 2374  rm ./.parentlock
 2375  cd ..
 2376  /Applications/Firefox.app/Contents/MacOS/firefox-bin -profilemanager &
 2377  pwd
 2378  ll
 2379  cd rta1fsmr.RancherSnap
 2380  ll
 2381  ls -al | grep -i lock
 2382  rm ./.parentlock
 2383  /Applications/Firefox.app/Contents/MacOS/firefox-bin -profilemanager &
 2384  cd ..
 2385  ls -al
 2386  rm rta1fsmr.RancherSnap
 2387  ll
 2388  mv 404cmr8e.default-release rta1fsmr.RancherSnap
 2389  ls -alR 404cmr8e.default-release
 2390  mv 404cmr8e.default-release rta1fsmr.RancherSnap
 2391  ll
 2392  whoami
 2393  ls -al
 2394  rename
 2395  mkdir rta1fsmr.RancherSnap
 2396  ll
 2397  mv 404cmr8e.default-release/* ./rta1fsmr.RancherSnap
 2398  ll
 2399  sudo bash
 2400  ll
 2401  history | grep firefox
 2402  /Applications/Firefox.app/Contents/MacOS/firefox-bin -profilemanager &
 2403  cd
 2404  mount
 2405  pwd
 2406  ll
 2407  cd cit
 2408  cd git
 2409  ll
 2410  cd GitHub
 2411  ll
 2412  cd ..
 2413  cd 
 2414  ssh git@gist.github.com:f41e49009996280e3b398425f9e40b36.git
 2415  pwd
 2416  cd gitHub
 2417  cd GitHub
 2418  cd git
 2419  ll
 2420  cd ..
 2421  mkdir GH
 2422  mv git/agnoster-zsh-theme ~/GH/
 2423  mv git/iTerm2-Color-Schemes ~/GH/
 2424  mv git/kubernetes-the-hard-way.git ~/GH/
 2425  pwd
 2426  cd git
 2427  cd GitHub
 2428  ll
 2429  cd gists
 2430  ll
 2431  cd ..
 2432  mv ./gists ~/GH/
 2433  mv ./kuard ~/GH/
 2434  cd ..
 2435  ll
 2436  rmdir GitHub
 2437  cd GitHub
 2438  ll
 2439  ls -al
 2440  cd ..
 2441  rm -rf ./GitHub
 2442  ll
 2443  cd ..
 2444  cd GH
 2445  ll
 2446  git clone https://gist.github.com/f41e49009996280e3b398425f9e40b36.git
 2447  ll
 2448  cd f41e49009996280e3b398425f9e40b36
 2449  ll
 2450  pwd
 2451  cd ..
 2452  ll
 2453  mv f41e49009996280e3b398425f9e40b36 ./gists
 2454  cd gists
 2455  ll
 2456  ln -s ./f41e49009996280e3b398425f9e40b36 ./OKD-Fedora-DO-Notes 
 2457  ll
 2458  pwd
 2459  ll
 2460  rmdir f41e49009996280e3b398425f9e40b36
 2461  rm -rf ./f41e49009996280e3b398425f9e40b36
 2462  ll
 2463  rm ./OKD-Fedora-DO-Notes
 2464  ll
 2465  cd
 2466  brew update git
 2467  brew upgrade git
 2468  git --version
 2469  git config --global user.name kcalmond
 2470  git config --global user.name
 2471  git credential-osxkeychain
 2472  git config --global credential.helper osxkeychain
 2473  pwd
 2474  cd GH
 2475  ll
 2476  git clone https://github.com/kcalmond/gherkin.git
 2477  ll
 2478  cd gists
 2479  ll
 2480  cd OKD-Fedora-DO-Notes
 2481  ll
 2482  git --help
 2483  cd ..
 2484  ll
 2485  rm -rf ./OKD-Fedora-DO-Notes
 2486  ll
 2487  git clone https://gist.github.com/f41e49009996280e3b398425f9e40b36.git
 2488  ll
 2489  git clone https://gist.github.com/ffc78d0425f26ae2461b094a49a25435.git
 2490  ll
 2491  cd ffc78d0425f26ae2461b094a49a25435
 2492  ll
 2493  pwd
 2494  cd ..
 2495  ll
 2496  git init
 2497  ll
 2498  ls -al
 2499  rm -rf .git
 2500  mkdir OKD-Notes
 2501  cd OKD-Notes
 2502  git init
 2503  echo "# OKD-Notes" >> README.md
 2504  git add README.md
 2505  git commit -m "first commit"
 2506  git branch -M master
 2507  git remote add origin https://github.com/kcalmond/OKD-Notes.git
 2508  git push -u origin master
 2509  pwd
 2510  ll
 2511  history | grep ssh
 2512  ssh -i ~/.ssh/do_id_rsa root@159.65.72.149
 2513  history
 2514  git push -u origin master
 2515  git push
 2516  ll
 2517  git pull
 2518  ll
 2519  cat README.md
 2520  git push --all
 2521  git push -u origin master
 2522  git push
 2523  git push -u master origin
 2524  ll
 2525  ls -al
 2526  cd .git
 2527  ls -al;
 2528  cat HEAD
 2529  more config
 2530  git checkout master
 2531  git checkout origin
 2532  git checkout develop
 2533  git branch
 2534  ls
 2535  git status
 2536  cd ..
 2537  git status
 2538  pwd
 2539  ll
 2540  cat README.md
 2541  git push
 2542  git add README.md
 2543  git status
 2544  git commit
 2545  git push
 2546  git log
 2547  ll
 2548  git switch -c Part0
 2549  cat README.md
 2550  git add README.md
 2551  git commit
 2552  git status
 2553  git push
 2554  git push --set-upstream origin Part0
 2555  git switch master
 2556  ll
 2557  history
 2558  whoami
 2559  history
 2560  ssh -i ~/.ssh/do_id_rsa root@159.65.72.149
 2561  git status
 2562  git add README.md
 2563  git status
 2564  git commit
 2565  git push
 2566  git push --set-upstream origin Part0
 2567  history | grep git
 2568  git switch -c Part0
 2569  git switch Part0
 2570  git add README.md
 2571  git status
 2572  git commit
 2573  git push --set-upstream origin Part0
 2574  git status
 2575  git switch master
 2576  git checkout master
 2577  git status
 2578  git push
 2579  git pull
 2580  ls
 2581  ll
 2582  vim README.md
 2583  git commit
 2584  git config pull.rebase true
 2585  git commit
 2586  cat README.md
 2587  nslookup 118.70.117.156
 2588  whois 118.70.117.156
 2589  history | tail
 2590  htop
 2591  history
 2592  history | grep ssh
 2593  ssh -i ~/.ssh/do_id_rsa root@159.65.72.149
 2594  pwd
 2595  ll
 2596  vim README.md
 2597  pwd
 2598  cd
 2599  cd GH
 2600  ll
 2601  cd OKD-Notes
 2602  pwd
 2603  ll
 2604  vim README.md
 2605  exit
 2606  history | grep 159
 2607  history | grep git
 2608  git status
 2609  git switch part0
 2610  git merge --quit
 2611  git switch part0
 2612  git status
 2613  git pull
 2614  pwd
 2615  cd ..
 2616  rm -rf ./OKD-Notes
 2617  ll
 2618  git clone https://github.com/kcalmond/OKD-Notes.git
 2619  ll
 2620  cd OKD-Notes
 2621  git status
 2622  ll
 2623  pwd
 2624  ll
 2625  cd ..
 2626  ll
 2627  mkdir DO_OKD_Install
 2628  cd DO_OKD_Install
 2629  git clone https://github.com/dustymabe/digitalocean-okd-install.git
 2630  ll
 2631  cd ..
 2632  rm -rf ./DO_OKD_Install
 2633  git clone https://github.com/dustymabe/digitalocean-okd-install.git
 2634  ll
 2635  cd digitalocean-okd-install
 2636  ll
 2637  ssh -i ~/.ssh/do_id_rsa root@159.65.72.149
 2638  pwd
 2639  ll
 2640  vim digitalocean-okd-install
 2641  ll
 2642  vim config
 2643  ssh -i ~/.ssh/do_id_rsa root@159.65.72.149
 2644  exit
 2645  ssh -i ~/.ssh/do_id_rsa root@159.65.72.149
 2646  exit
 2647  htop
 2648  nslookup hackberry
 2649  nslookup strawberry
 2650  nslookup blueberry
 2651  nslookup blackberry
 2652  ssh root@blackberry
 2653  ssh root@blueberry
 2654  ssh root@strawberry
 2655  ssh root@hackberry
 2656  history | grep img
 2657  which unxz
 2658  cd Downloads
 2659  unxz CentOS-Userland-7-armv7hl-RaspberryPI-Minimal-4-2003-sda.raw.xz
 2660  mount
 2661  vim ~/.ssh/known_hosts
 2662  ssh root@strawberry
 2663  ssh root@blueberry
 2664  ssh root@strawberry
 2665  ssh root@blackberry
 2666  ssh root@blueberry
 2667  hdiutil
 2668  hdiutil convert -format UDRW -o ./CentOS-8.2.2004-aarch64-minimal.img ./CentOS-8.2.2004-aarch64-minimal.iso
 2669  ls -alt | head
 2670  mv CentOS-8.2.2004-aarch64-minimal.img.dmg CentOS-8.2.2004-aarch64-minimal.img
 2671* ssh root@blueberry
 2672* ssh root@blackberry
 2673* vim ~/.ssh/k
 2674* vim ~/.ssh/known_hosts
 2675* ssh root@blackberry
 2676* ssh ubuntu@blackberry
 2677* ssh root@blueberry
 2678* ssh root@strawberry
 2679* hostname
 2680* ssh ubuntu@blackberry
 2681* ssh root@strawberry
 2682* vim ~/.ssh/known_hosts `
 2683* vim ~/.ssh/known_hosts
 2684* ssh root@strawberry
 2685* ssh ubuntu@strawberry
 2686* ssh ubuntu@blueberry
 2687* ssh ubuntu@strawberry
 2688  cd
 2689  brew install cfssl
 2690  brew upgrade cfssl
 2691  pwd
 2692  mkdir b8kery
 2693  cd b8kery
 2694  mkdir certs
 2695  cd certs
 2696  echo '{"CN":"CA","key":{"algo":"rsa","size":2048}}' | cfssl gencert -initca - | cfssljson -bare ca -
 2697  echo '{"signing":{"default":{"expiry":"43800h","usages":["signing","key encipherment","server auth","client auth"]}}}' &gt; ca-config.json\n
 2698  set -o vi
 2699  echo '{"signing":{"default":{"expiry":"43800h","usages":["signing","key encipherment","server auth","client auth"]}}}' > ca-config.json\n
 2700  ll
 2701  cat ca-config.json
 2702  export NAME=node-1\n
 2703  export NAME=blueberry.almond.local
 2704  export ADDRESS=192.168.100.16,$NAME
 2705  echo $ADDRESS
 2706  echo '{"CN":"'$NAME'","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="$ADDRESS" - | cfssljson -bare $NAME\n
 2707  export NAME=blackberry.almond.local
 2708  export ADDRESS=192.168.100.137,$NAME
 2709  echo '{"CN":"'$NAME'","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="$ADDRESS" - | cfssljson -bare $NAME\n
 2710  export NAME=strawberry.almond.local
 2711  export ADDRESS=192.168.100.168,$NAME
 2712  echo '{"CN":"'$NAME'","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="$ADDRESS" - | cfssljson -bare $NAME\n
 2713  ls
 2714  ll
 2715* exit
 2716* vim certdistcmd
 2717  HOST=192.168.100.16\nUSER=ubuntu\n\nscp ca.pem $USER@$HOST:etcd-ca.crt\nscp blueberry.almond.local.pem $USER@$HOST:server.crt\nscp blueberry.almond.local-key.pem $USER@$HOST:server.key
 2718  history
 2719  HOST=192.168.100.16
 2720  USER=ubuntu
 2721  scp ca.pem $USER@$HOST:etcd-ca.crt
 2722  ls
 2723  scp ca.pem $USER@$HOST:etcd-ca.crt
 2724  scp
 2725  echo $USER
 2726  echo $HOST
 2727  scp ./ca.pem ubuntu@192.168.100.16:etcd-ca.crt
 2728  man scp
 2729  brew install sshpass
 2730  scp ./ca.pem ubuntu@192.168.100.16:etcd-ca.crt
 2731  scp blueberry.almond.local.pem $USER@$HOST:server.crt
 2732  scp blueberry.almond.local.pem ubuntu@192.168.100.16:server.crt
 2733  scp blueberry.almond.local-key.pem ubuntu@192.168.100.16:server.key
 2734  scp ./ca.pem ubuntu@192.168.100.137:etcd-ca.crt
 2735  scp blackberry.almond.local.pem ubuntu@192.168.100.137:server.crt
 2736  scp blackberry.almond.local-key.pem ubuntu@192.168.100.137:server.key
 2737  scp ./ca.pem ubuntu@192.168.100.168:etcd-ca.crt
 2738  scp strawberry.almond.local.pem ubuntu@192.168.100.168:server.crt
 2739  scp strawberry.almond.local-key.pem ubuntu@192.168.100.168:server.key
 2740* vim certdistcmd
 2741* ssh ubuntu@blueberry
 2742* ssh ubuntu@strawberry
 2743* ssh ubuntu@blueberry
 2744* ssh ubuntu@blackberry
 2745  pwd
 2746  cd ..
 2747  ll
 2748  cd ..
 2749  mv b8kery b8kerybuild
 2750  cd GH
 2751  ll
 2752  git clone https://github.com/kcalmond/b8kery.git
 2753  git status
 2754  cd b8kery
 2755  git status
 2756  git add README.md
 2757  git status
 2758  git commit
 2759  git pull
 2760  git config --list
 2761  git add -A
 2762  git commit -m "first edit"
 2763  git push
 2764  git add -A
 2765  git commit -m ".
 2766  git commit -m " "
 2767  git commit -m "edits"
 2768  git push
 2769  git add -A; git commit -m "edits"; git push
 2770  history | grep cfssl
 2771  history | tail -5
 2772  history | tail -80
 2773  ll ~/b8kerybuild
 2774  ll ~/b8kerybuild/certs
 2775  ls -l
 2776  ls -l  ~/b8kerybuild/certs
 2777  git add -A; git commit -m "edits"; git push
 2778  ls -l ~/b8kerybuild/certs
 2779  git add -A; git commit -m "edits"; git push
 2780  pwd
 2781  ll
 2782  touch foo bar blat
 2783  ll
 2784  vim foo
 2785  vim bar
 2786  vim blat
 2787  HOST=192.168.100.16
 2788  USER=ubuntu
 2789  scp foo $USER@$HOST:foo
 2790  git add -A; git commit -m "edits"; git push
 2791  ll
 2792  cp README.md part1_OS_etcd.md
 2793  cp README.md part2_k3s.md
 2794  gid add -A
 2795  git add -A
 2796  git add -A; git commit -m "edits"; git push
 2797  ll
 2798  rm bar
 2799  rm blat
 2800  rm foo
 2801  git add -A; git commit -m "edits"; git push
 2802  ll
 2803  pwd
 2804  git add -A; git commit -m "edits"; git push
 2805  pwd
 2806  pushd ~
 2807  kctx
 2808  cd .kube
 2809  ll
 2810  kns
 2811  vim config
 2812  cd ..
 2813  cd bin
 2814  ls
 2815  cd ..
 2816  pwd
 2817  cd bin
 2818  ll
 2819  vim setkctx_paths.sh
 2820  cd 
 2821  source ~/bin/setkctx_paths.sh
 2822  rm ~/.kube/config
 2823  cd .kub
 2824  cd .kube
 2825  vim ./b8kery.yaml
 2826  ll
 2827  source ~/bin/setkctx_paths.sh
 2828  kctx
 2829  vim ./b8kery.yaml
 2830  source ~/bin/setkctx_paths.sh
 2831  kctx
 2832  kctx b8kery
 2833  kubectl get nodes
 2834  vim b8kery.yaml
 2835  kubectl get nodes
 2836  kubectl get pods -A -o wide
 2837  pwd
 2838  cd ..
 2839  cd GH
 2840  ll
 2841  git clone https://github.com/metallb/metallb.git
 2842  cd metallb
 2843  ll
 2844  cd manifests
 2845  ll
 2846  vim namespace.yaml.raw
 2847  vim metallb.yaml.raw
 2848  ll
 2849  diff namespace.yaml namespace.yaml.raw
 2850  diff metallb.yaml metallb.yaml.raw
 2851  pwd
 2852  ll
 2853  kubectl get nodes
 2854  man curl
 2855  curl -sL https://github.com/metallb/metallb/blob/main/manifests/namespace.yaml
 2856  curl -sL https://raw.githubusercontent.com/metallb/metallb/main/manifests/namespace.yaml
 2857  curl -sL https://raw.githubusercontent.com/metallb/metallb/main/manifests/metallb.yaml
 2858  curl -sL https://raw.githubusercontent.com/metallb/metallb/main/manifests/namespace.yaml | kubectl apply -f -
 2859  curl -sL https://raw.githubusercontent.com/metallb/metallb/main/manifests/metallb.yaml | kubectl apply -f -
 2860  kubectl get pods -A 
 2861  kns metallb-system
 2862  kubectl get pods -o wide
 2863* exit
 2864  kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
 2865  pwd
 2866  ll
 2867  kubectl get pods -o wide
 2868  vim metallb_config.map
 2869  kubectl get pods -o wide
 2870  pushd ~
 2871  popd
 2872  clear
 2873  kubectl create namespace kube-verify
 2874  kubectl get namespaces
 2875  alias k=kubectl
 2876  k get namespaces
 2877  cat <<EOF | kubectl create -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kube-verify\n  namespace: kube-verify\n  labels:\n    app: kube-verify\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kube-verify\n  template:\n    metadata:\n      labels:\n        app: kube-verify\n    spec:\n      containers:\n      - name: nginx\n        image: quay.io/clcollins/kube-verify:01\n        ports:\n        - containerPort: 8080\nEOF
 2878  kubectl get pods -o wide
 2879  kns kube-verify
 2880  kubectl get pods -o wide
 2881  cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Service\nmetadata:\n  name: kube-verify\n  namespace: kube-verify\nspec:\n  selector:\n    app: kube-verify\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n  type: LoadBalancer\nEOF
 2882  kubectl get pods -o wide
 2883  kubectl get service kube-verify -n kube-verify
 2884  ll
 2885  kubectl get service kube-verify -n kube-verify
 2886  kubectl get pods -o wide
 2887  history
 2888  kubectl get all
 2889  kubectl get all -A
 2890  kubectl delete --help
 2891  ll
 2892  ls -alt
 2893  vim kube-verify.yaml
 2894  kubectl delete -f ./kube-verify.yaml
 2895  kubectl get all -A
 2896  mkdir custom
 2897  ls -alt
 2898  mv kube-verify.yaml metall* ./custom
 2899  ll
 2900  rm *.raw
 2901  cd custom
 2902  ll
 2903  mv ./metallb.yaml ..
 2904  ll
 2905  rm *.raw
 2906  mv kube-verify.yaml kube-verify-lb.yaml
 2907  vim kube-verify.yaml
 2908  kubectl delete -f ./kube-verify.yaml
 2909  kubectl get all -A
 2910  kubectl delete namespace kube-verify
 2911  kubectl get all -A
 2912  vim metallb.configmap.yaml
 2913  ll ..
 2914  kubectl del -f ./metallb.configmap.yaml
 2915  kubectl delete -f ./metallb.configmap.yaml
 2916  ll
 2917  vim metallb.configmap.yaml
 2918  kubectl delete -f ./metallb_config.map
 2919  kubectl get configmaps
 2920  kubectl get configmaps -A
 2921  kubectl get namespaces
 2922  kns metallb-system
 2923  k get all
 2924  ls
 2925  rm metallb.configmap.yaml
 2926  mv metallb_config.map configmap.yaml
 2927  ll
 2928  kubectl delete -f ./configmap.yaml -n metallb-system
 2929  cd ..
 2930  kubectl get secrets
 2931  kubectl delete secret memberlist
 2932  ls
 2933  kubectl delete -f ./metallb.yaml
 2934  kubectl delete -f ./namespace.yaml
 2935  k get all -A
 2936  history | grep push
 2937  git add -A; git commit -m "edits"; git push
 2938  pwd
 2939  cd ../../
 2940  ll
 2941  cd b8kery
 2942  ll
 2943  git add -A; git commit -m "edits"; git push
 2944  vim ~/.kube/b8kery.yaml
 2945  k
 2946  k get nodes
 2947  k get all
 2948  k get all -A
 2949  pwd
 2950  ll
 2951  cp part2_k3s.md part2_k3s_nginx_metallb.md
 2952  git add -A; git commit -m "edits"; git push
 2953  vim ~/.kube/b8kery.yaml
 2954  kctx
 2955  k get nodes
 2956  k get pods -A
 2957  k get pods -A -o wide
 2958  helm version
 2959  brew install helm
 2960  which helm
 2961  helm --version
 2962  helm version
 2963  chmod 600 ~/.kube/b8kery.yaml
 2964  helm version
 2965  helm repo add stable https://kubernetes-charts.storage.googleapis.com
 2966  helm repo update
 2967  set -o vi
 2968  helm install metallb stable/metallb --namespace kube-system \\n  --set configInline.address-pools[0].name=default \\n  --set configInline.address-pools[0].protocol=layer2 \\n  --set configInline.address-pools[0].addresses[0]=192.168.200.1-192.168.200.127
 2969  helm install metallb stable/metallb --namespace kube-system --set configInline.address-pools[0].name=default --set configInline.address-pools[0].protocol=layer2 --set configInline.address-pools[0].addresses[0]=192.168.200.1-192.168.200.127
 2970  kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml
 2971  kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml
 2972  kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
 2973  kubectl get all -A
 2974  cat <<EOF | kubectl create -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: |\n    address-pools:\n    - name: address-pool-1\n      protocol: layer2\n      addresses:\n      - 192.168.200.1/25\nEOF
 2975  kubectl get all -A
 2976  kubectl create namespace kube-verify
 2977  kubectl get namespaces
 2978  cat <<EOF | kubectl create -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kube-verify\n  namespace: kube-verify\n  labels:\n    app: kube-verify\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kube-verify\n  template:\n    metadata:\n      labels:\n        app: kube-verify\n    spec:\n      containers:\n      - name: nginx\n        image: quay.io/clcollins/kube-verify:01\n        ports:\n        - containerPort: 8080\nEOF
 2979  kubectl get all -A
 2980  kubectl get nodes
 2981  k get pods -A -o wide
 2982  cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Service\nmetadata:\n  name: kube-verify\n  namespace: kube-verify\nspec:\n  selector:\n    app: kube-verify\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n  type: LoadBalancer\nEOF
 2983  kubectl get service kube-verify -n kube-verify
 2984  ping 192.168.200.0
 2985  kubectl describe service kube-verify -n kube-verify
 2986  curl 192.168.200.0
 2987  cat <<EOF | kubectl create -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: |\n    address-pools:\n    - name: address-pool-1\n      protocol: layer2\n      addresses:\n      - 192.168.200.128/25\nEOF
 2988  kubectl create configmap metallb-update --from-literal=config --dry-run -o yaml
 2989  kubectl create configmap metallb-update --from-literal=foo=bar --dry-run=client -o yaml
 2990  kubectl edit configmap config
 2991  kns
 2992  kns metallb-system
 2993  kubectl edit configmap config
 2994  kns default
 2995  k get all
 2996  k get all -A
 2997  kubectl delete deployment kube-verify
 2998  kubectl delete deployment.apps/kube-verify
 2999  kubectl delete deployment.apps kube-verify
 3000  kns kube-verify
 3001  k get deploy
 3002  k get rs
 3003  k get pods
 3004  k delete deploy kube-verify
 3005  k get all
 3006  k delete service kube-verify
 3007  k get all
 3008  cat <<EOF | kubectl create -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kube-verify\n  namespace: kube-verify\n  labels:\n    app: kube-verify\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kube-verify\n  template:\n    metadata:\n      labels:\n        app: kube-verify\n    spec:\n      containers:\n      - name: nginx\n        image: quay.io/clcollins/kube-verify:01\n        ports:\n        - containerPort: 8080\nEOF
 3009  k get all
 3010  cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Service\nmetadata:\n  name: kube-verify\n  namespace: kube-verify\nspec:\n  selector:\n    app: kube-verify\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n  type: LoadBalancer\nEOF
 3011  k get all
 3012  kubectl get service kube-verify -n kube-verify
 3013  kns default
 3014  k create namespace kube-verify-2
 3015  kns kube-verify-2
 3016  cat <<EOF | kubectl create -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kube-verify-2\n  namespace: kube-verify-2\n  labels:\n    app: kube-verify-2\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kube-verify-2\n  template:\n    metadata:\n      labels:\n        app: kube-verify-2\n    spec:\n      containers:\n      - name: nginx\n        image: quay.io/clcollins/kube-verify:01\n        ports:\n        - containerPort: 8080\nEOF
 3017  cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Service\nmetadata:\n  name: kube-verify-2\n  namespace: kube-verify-2\nspec:\n  selector:\n    app: kube-verify-2\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n  type: LoadBalancer\nEOF
 3018  k get service kube-verify-2
 3019  k describe service kube-verify-2
 3020  k describe service kube-verify-2 -n kube-verify-2
 3021  k describe service kube-verify -n kube-verify
 3022  k get pods -A -o wide
 3023  k describe service kube-verify-2 -n kube-verify-2
 3024  pwd
 3025  ll
 3026  helm install nginx-ingress stable/nginx-ingress --namespace kube-system \\n    --set defaultBackend.enabled=false
 3027  kubectl --namespace kube-system get services -o wide -w nginx-ingress-controller
 3028  kubectl get nodes
 3029  k get all
 3030  k get all -A
 3031  history | grep verify
 3032  k delete service kube-verify
 3033  k delete service --help
 3034  history | grep verify
 3035  kns kube-verify
 3036  k delete service kube-verify
 3037  kns kube-verify-2
 3038  k delete service kube-verify-2
 3039  k get all -A
 3040  history | grep delete
 3041  kubectl delete deployment.apps kube-verify
 3042  kns
 3043  kubectl delete deployment.apps kube-verify-2
 3044  kns kube-verify
 3045  kubectl delete deployment.apps kube-verify
 3046  k get all
 3047  k get all -A
 3048  kns
 3049  kns default
 3050  history | grep update
 3051  history | grep edit
 3052  kns metallb
 3053  kns metallb-system
 3054  kubectl edit configmap config
 3055  kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.2/cert-manager.crds.yaml
 3056  helm repo add jetstack https://charts.jetstack.io && helm repo update
 3057  helm install cert-manager jetstack/cert-manager --namespace kube-system  --version v1.0.2
 3058  kubectl get pods -n kube-system -l app.kubernetes.io/instance=cert-manager -o wide
 3059  cat <<EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-staging\nspec:\n  acme:\n    email: kcalmond@gmail.com\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-staging\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\nEOF
 3060  kubectl get pods -n kube-system -l app.kubernetes.io/instance=cert-manager -o wide
 3061  kns
 3062  kns kube-system
 3063  cat <<EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-staging\nspec:\n  acme:\n    email: kcalmond@gmail.com\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-staging\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\nEOF
 3064  k get all -A
 3065  helm --help
 3066  history | grep cert
 3067  helm uninstall cert-manager jetstack/cert-manager --namespace kube-system
 3068  k get all -A
 3069  kubectl create namespace
 3070  kubectl create namespace cert-manager
 3071  history | grep install
 3072  helm install cert-manager jetstack/cert-manager --namespace cert-manager  --version v1.0.2
 3073  k rollout
 3074  k rollout deployments
 3075  k rollout status
 3076  k rollout status certmanager
 3077  k rollout status cert-manager
 3078  k get all -A
 3079  k get pods -n cert-manager -o wide
 3080  kubectl get pods -n cert-manager -l app.kubernetes.io/instance=cert-manager -o wide
 3081  kns cert-manager
 3082  cat <<EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-staging\nspec:\n  acme:\n    email: hehim@chrisalmond.com\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-staging\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\nEOF
 3083  cat <<EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    email: hehim@chrisalmond.com\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx\nEOF
 3084  k get all -A -o wide
 3085* ssh ubuntu@blackberry
 3086  ssh ubuntu@blueberry
 3087  history | grep push
 3088  git add -A; git commit -m "edits"; git push
 3089  ll
 3090  cp part2_k3s_nginx_metallb.md part2_k3s.md
 3091  git add -A; git commit -m "edits"; git push
 3092  k get pods -A -o wide
 3093  k get pods -A
 3094  cp part2_k3s_nginx_metallb.md part2_k3s.md
 3095  git add -A; git commit -m "edits"; git push
 3096  ll
 3097  git add -A; git commit -m "edits"; git push
 3098  ll
 3099  mv part2_k3s_nginx_metallb.md part2_metallb_certmgr_nginx.md
 3100  git add -A; git commit -m "edits"; git push
 3101  ll
 3102  ls -l
 3103  ls
 3104  git add -A; git commit -m "edits"; git push
 3105  k get pods -A
 3106  history
 3107  history | grep githubusercontent
 3108  history | grep secretkey
 3109  history | grep metallb-system
 3110  history | grep edit
 3111  kns metallb-system
 3112  kubectl edit configmap config
